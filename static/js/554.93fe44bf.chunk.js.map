{"version":3,"file":"static/js/554.93fe44bf.chunk.js","mappings":"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","sources":["services/qrCodeService.ts","pages/AdminQRCodesPage.tsx","utils/helpers.ts","services/seanceService.ts"],"sourcesContent":["import QRCode from 'qrcode';\r\n\r\n/**\r\n * GÃ©nÃ©rer un QR code pour une sÃ©ance\r\n */\r\nexport const generateQRCode = async (seanceId: string, _seanceName: string): Promise<string> => {\r\n  try {\r\n    const baseUrl = window.location.origin;\r\n    const voteUrl = `${baseUrl}/votepublic/seance/${seanceId}`;\r\n    \r\n    const qrCodeDataUrl = await QRCode.toDataURL(voteUrl, {\r\n      width: 300,\r\n      margin: 2,\r\n      color: {\r\n        dark: '#000000',\r\n        light: '#FFFFFF'\r\n      }\r\n    });\r\n    \r\n    return qrCodeDataUrl;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la gÃ©nÃ©ration du QR code:', error);\r\n    throw new Error('Impossible de gÃ©nÃ©rer le QR code');\r\n  }\r\n};\r\n\r\n/**\r\n * TÃ©lÃ©charger un QR code\r\n */\r\nexport const downloadQRCode = async (seanceId: string, seanceName: string): Promise<void> => {\r\n  try {\r\n    const qrCodeDataUrl = await generateQRCode(seanceId, seanceName);\r\n    \r\n    // CrÃ©er un lien de tÃ©lÃ©chargement\r\n    const link = document.createElement('a');\r\n    link.href = qrCodeDataUrl;\r\n    link.download = `qr-code-${seanceName.replace(/[^a-z0-9]/gi, '-').toLowerCase()}.png`;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  } catch (error) {\r\n    console.error('Erreur lors du tÃ©lÃ©chargement du QR code:', error);\r\n    throw new Error('Impossible de tÃ©lÃ©charger le QR code');\r\n  }\r\n};\r\n\r\n/**\r\n * Imprimer un QR code\r\n */\r\nexport const printQRCode = async (seanceId: string, seanceName: string): Promise<void> => {\r\n  try {\r\n    const qrCodeDataUrl = await generateQRCode(seanceId, seanceName);\r\n    \r\n    // CrÃ©er une nouvelle fenÃªtre pour l'impression\r\n    const printWindow = window.open('', '_blank');\r\n    if (!printWindow) {\r\n      throw new Error('Impossible d\\'ouvrir la fenÃªtre d\\'impression');\r\n    }\r\n    \r\n    printWindow.document.write(`\r\n      <!DOCTYPE html>\r\n      <html>\r\n        <head>\r\n          <title>QR Code - ${seanceName}</title>\r\n          <style>\r\n            body {\r\n              font-family: Arial, sans-serif;\r\n              text-align: center;\r\n              padding: 20px;\r\n              margin: 0;\r\n            }\r\n            .qr-container {\r\n              display: flex;\r\n              flex-direction: column;\r\n              align-items: center;\r\n              justify-content: center;\r\n              min-height: 100vh;\r\n            }\r\n            .qr-code {\r\n              margin: 20px 0;\r\n            }\r\n            .seance-info {\r\n              margin: 20px 0;\r\n              font-size: 18px;\r\n            }\r\n            .instructions {\r\n              margin: 20px 0;\r\n              font-size: 14px;\r\n              color: #666;\r\n            }\r\n            @media print {\r\n              body { margin: 0; }\r\n              .qr-container { min-height: auto; }\r\n            }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <div class=\"qr-container\">\r\n            <h1>QR Code - ${seanceName}</h1>\r\n            <div class=\"qr-code\">\r\n              <img src=\"${qrCodeDataUrl}\" alt=\"QR Code pour ${seanceName}\" />\r\n            </div>\r\n            <div class=\"seance-info\">\r\n              <p><strong>SÃ©ance:</strong> ${seanceName}</p>\r\n              <p><strong>URL:</strong> ${window.location.origin}/votepublic/seance/${seanceId}</p>\r\n            </div>\r\n            <div class=\"instructions\">\r\n              <p>Scannez ce QR code pour accÃ©der Ã  la page de vote de cette sÃ©ance</p>\r\n            </div>\r\n          </div>\r\n        </body>\r\n      </html>\r\n    `);\r\n    \r\n    printWindow.document.close();\r\n    printWindow.focus();\r\n    \r\n    // Attendre que le contenu soit chargÃ© avant d'imprimer\r\n    setTimeout(() => {\r\n      printWindow.print();\r\n      printWindow.close();\r\n    }, 500);\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'impression du QR code:', error);\r\n    throw new Error('Impossible d\\'imprimer le QR code');\r\n  }\r\n}; ","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { ArrowLeft, QrCode, Download, Printer, Eye } from 'lucide-react';\r\nimport { getAllSeances } from '../services/seanceService';\r\nimport { useNotifications } from '../hooks/useNotifications';\r\nimport { Seance } from '../types';\r\nimport { downloadQRCode, printQRCode, generateQRCode } from '../services/qrCodeService';\r\n\r\nexport const AdminQRCodesPage: React.FC = () => {\r\n  const [seances, setSeances] = useState<Seance[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [qrCodes, setQrCodes] = useState<Record<string, string>>({});\r\n  const { showSuccess, showError } = useNotifications();\r\n\r\n  const loadSeances = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const allSeances = await getAllSeances();\r\n      setSeances(allSeances);\r\n      \r\n      // GÃ©nÃ©rer les QR codes pour toutes les sÃ©ances\r\n      const qrCodesData: Record<string, string> = {};\r\n      for (const seance of allSeances) {\r\n        try {\r\n          const qrCode = await generateQRCode(seance.id, seance.nom);\r\n          qrCodesData[seance.id] = qrCode;\r\n        } catch (error) {\r\n          console.error(`Erreur lors de la gÃ©nÃ©ration du QR code pour ${seance.nom}:`, error);\r\n        }\r\n      }\r\n      setQrCodes(qrCodesData);\r\n    } catch (error: any) {\r\n      console.error('Erreur lors du chargement des sÃ©ances:', error);\r\n      showError('Erreur de chargement', error.message || 'Impossible de charger les sÃ©ances');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [showError]);\r\n\r\n  useEffect(() => {\r\n    loadSeances();\r\n  }, [loadSeances]);\r\n\r\n  const generateQRCodeUrl = (seanceId: string) => {\r\n    const baseUrl = window.location.origin;\r\n    return `${baseUrl}/votepublic/seance/${seanceId}`;\r\n  };\r\n\r\n  const handleDownloadQR = async (seanceId: string, seanceName: string) => {\r\n    try {\r\n      await downloadQRCode(seanceId, seanceName);\r\n      showSuccess('QR Code tÃ©lÃ©chargÃ©', `Le QR code pour \"${seanceName}\" a Ã©tÃ© tÃ©lÃ©chargÃ© avec succÃ¨s`);\r\n    } catch (error: any) {\r\n      showError('Erreur de tÃ©lÃ©chargement', error.message || 'Impossible de tÃ©lÃ©charger le QR code');\r\n    }\r\n  };\r\n\r\n  const handlePrintQR = async (seanceId: string, seanceName: string) => {\r\n    try {\r\n      await printQRCode(seanceId, seanceName);\r\n      showSuccess('Impression lancÃ©e', `Impression du QR code pour \"${seanceName}\" lancÃ©e`);\r\n    } catch (error: any) {\r\n      showError('Erreur d\\'impression', error.message || 'Impossible d\\'imprimer le QR code');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto\"></div>\r\n          <p className=\"mt-4 text-gray-600\">Chargement des sÃ©ances...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      {/* En-tÃªte */}\r\n      <div className=\"bg-white shadow-sm border-b border-gray-200\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"py-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center space-x-4\">\r\n                <Link\r\n                  to=\"/admin\"\r\n                  className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\"\r\n                >\r\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\r\n                  Retour\r\n                </Link>\r\n                <div>\r\n                  <h1 className=\"text-3xl font-bold text-gray-900\">QR Codes</h1>\r\n                  <p className=\"mt-1 text-gray-600\">\r\n                    GÃ©nÃ©rez et gÃ©rez les QR codes pour les sÃ©ances\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <button className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\">\r\n                <QrCode className=\"w-4 h-4 mr-2\" />\r\n                GÃ©nÃ©rer tous les QR codes\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Contenu principal */}\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        {/* Statistiques */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\r\n          <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                <QrCode className=\"w-6 h-6 text-blue-600\" />\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-600\">Total sÃ©ances</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{seances.length}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"p-2 bg-green-100 rounded-lg\">\r\n                <QrCode className=\"w-6 h-6 text-green-600\" />\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-600\">QR codes gÃ©nÃ©rÃ©s</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{seances.length}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"p-2 bg-yellow-100 rounded-lg\">\r\n                <QrCode className=\"w-6 h-6 text-yellow-600\" />\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-600\">SÃ©ances actives</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">\r\n                  {seances.filter(s => s.isActive).length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Liste des QR codes */}\r\n        <div className=\"bg-white rounded-lg shadow-sm\">\r\n          <div className=\"px-6 py-4 border-b border-gray-200\">\r\n            <h2 className=\"text-lg font-semibold text-gray-900\">\r\n              QR Codes des sÃ©ances ({seances.length})\r\n            </h2>\r\n          </div>\r\n          \r\n          {seances.length === 0 ? (\r\n            <div className=\"p-6 text-center text-gray-500\">\r\n              <QrCode className=\"w-12 h-12 mx-auto text-gray-300 mb-4\" />\r\n              <p>Aucune sÃ©ance trouvÃ©e</p>\r\n              <p className=\"text-sm\">CrÃ©ez d'abord des sÃ©ances pour gÃ©nÃ©rer des QR codes</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6\">\r\n              {seances.map((seance) => (\r\n                <div key={seance.id} className=\"bg-gray-50 rounded-lg p-6 border border-gray-200\">\r\n                  <div className=\"text-center\">\r\n                    {/* QR Code */}\r\n                    <div className=\"w-32 h-32 mx-auto bg-white rounded-lg border-2 border-gray-300 flex items-center justify-center mb-4\">\r\n                      {qrCodes[seance.id] ? (\r\n                        <img \r\n                          src={qrCodes[seance.id]} \r\n                          alt={`QR Code pour ${seance.nom}`}\r\n                          className=\"w-full h-full object-contain p-2\"\r\n                        />\r\n                      ) : (\r\n                        <QrCode className=\"w-16 h-16 text-gray-400\" />\r\n                      )}\r\n                    </div>\r\n                    \r\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n                      {seance.nom}\r\n                    </h3>\r\n                    \r\n                    <div className=\"text-sm text-gray-600 mb-4\">\r\n                      <p><strong>Date:</strong> {seance.date.toLocaleDateString('fr-FR')}</p>\r\n                      <p><strong>Heure:</strong> {seance.heure}</p>\r\n                      <p><strong>Films:</strong> {seance.films.length}</p>\r\n                    </div>\r\n\r\n                    <div className=\"text-xs text-gray-500 mb-4 break-all\">\r\n                      <strong>URL:</strong> {generateQRCodeUrl(seance.id)}\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center justify-center space-x-2\">\r\n                      <button\r\n                        onClick={() => handleDownloadQR(seance.id, seance.nom)}\r\n                        className=\"inline-flex items-center px-3 py-1 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\"\r\n                      >\r\n                        <Download className=\"w-3 h-3 mr-1\" />\r\n                        TÃ©lÃ©charger\r\n                      </button>\r\n                      \r\n                      <button\r\n                        onClick={() => handlePrintQR(seance.id, seance.nom)}\r\n                        className=\"inline-flex items-center px-3 py-1 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\"\r\n                      >\r\n                        <Printer className=\"w-3 h-3 mr-1\" />\r\n                        Imprimer\r\n                      </button>\r\n                      \r\n                      <Link\r\n                        to={`/seance/${seance.id}`}\r\n                        target=\"_blank\"\r\n                        className=\"inline-flex items-center px-3 py-1 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\"\r\n                      >\r\n                        <Eye className=\"w-3 h-3 mr-1\" />\r\n                        Voir\r\n                      </Link>\r\n                    </div>\r\n\r\n                    <div className=\"mt-4\">\r\n                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\r\n                        seance.isActive \r\n                          ? 'bg-green-100 text-green-800' \r\n                          : 'bg-red-100 text-red-800'\r\n                      }`}>\r\n                        {seance.isActive ? 'Active' : 'Inactive'}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Instructions */}\r\n        <div className=\"mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6\">\r\n          <h3 className=\"text-lg font-semibold text-blue-900 mb-2\">\r\n            Instructions d'utilisation\r\n          </h3>\r\n          <ul className=\"text-sm text-blue-800 space-y-1\">\r\n            <li>â¢ Chaque sÃ©ance gÃ©nÃ¨re automatiquement un QR code unique</li>\r\n            <li>â¢ Les QR codes pointent vers la page de vote de la sÃ©ance</li>\r\n            <li>â¢ TÃ©lÃ©chargez ou imprimez les QR codes pour les afficher sur place</li>\r\n            <li>â¢ Les utilisateurs peuvent scanner le QR code pour voter</li>\r\n            <li>â¢ Seules les sÃ©ances actives sont accessibles aux votes</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}; ","import { VALIDATION_RULES } from './constants';\r\n\r\n/**\r\n * GÃ©nÃ¨re un ID unique\r\n */\r\nexport const generateId = (): string => {\r\n  return Date.now().toString(36) + Math.random().toString(36).substring(2);\r\n};\r\n\r\n/**\r\n * GÃ©nÃ¨re un ID de session unique pour les votes anonymes\r\n */\r\nexport const generateSessionId = (): string => {\r\n  const timestamp = Date.now();\r\n  const random = Math.random().toString(36).substring(2);\r\n  return `${timestamp}-${random}`;\r\n};\r\n\r\n/**\r\n * Valide une adresse email\r\n */\r\nexport const isValidEmail = (email: string): boolean => {\r\n  return VALIDATION_RULES.EMAIL.test(email);\r\n};\r\n\r\n/**\r\n * Valide un mot de passe\r\n */\r\nexport const isValidPassword = (password: string): boolean => {\r\n  return password.length >= VALIDATION_RULES.PASSWORD_MIN_LENGTH;\r\n};\r\n\r\n/**\r\n * Valide un fichier image\r\n */\r\nexport const isValidImageFile = (file: File): boolean => {\r\n  return (\r\n    VALIDATION_RULES.ALLOWED_IMAGE_TYPES.indexOf(file.type) !== -1 &&\r\n    file.size <= VALIDATION_RULES.MAX_FILE_SIZE\r\n  );\r\n};\r\n\r\n/**\r\n * Redimensionne une image\r\n */\r\nexport const resizeImage = (\r\n  file: File,\r\n  maxWidth: number = 800,\r\n  maxHeight: number = 600,\r\n  quality: number = 0.8\r\n): Promise<Blob> => {\r\n  return new Promise((resolve, reject) => {\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    const img = new Image();\r\n\r\n    img.onload = () => {\r\n      // Calculer les nouvelles dimensions\r\n      let { width, height } = img;\r\n      \r\n      if (width > maxWidth) {\r\n        height = (height * maxWidth) / width;\r\n        width = maxWidth;\r\n      }\r\n      \r\n      if (height > maxHeight) {\r\n        width = (width * maxHeight) / height;\r\n        height = maxHeight;\r\n      }\r\n\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n\r\n      if (ctx) {\r\n        ctx.drawImage(img, 0, 0, width, height);\r\n        canvas.toBlob(\r\n          (blob) => {\r\n            if (blob) {\r\n              resolve(blob);\r\n            } else {\r\n              reject(new Error('Erreur lors du redimensionnement'));\r\n            }\r\n          },\r\n          'image/jpeg',\r\n          quality\r\n        );\r\n      } else {\r\n        reject(new Error('Impossible de crÃ©er le contexte canvas'));\r\n      }\r\n    };\r\n\r\n    img.onerror = () => reject(new Error('Erreur lors du chargement de l\\'image'));\r\n    img.src = URL.createObjectURL(file);\r\n  });\r\n};\r\n\r\n/**\r\n * Formate une date\r\n */\r\nexport const formatDate = (date: Date): string => {\r\n  return new Intl.DateTimeFormat('fr-FR', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n  }).format(date);\r\n};\r\n\r\n/**\r\n * Formate une note avec Ã©toiles\r\n */\r\nexport const formatRating = (rating: number): string => {\r\n  return `${rating}/5`;\r\n};\r\n\r\n/**\r\n * Calcule la moyenne des notes\r\n */\r\nexport const calculateAverageRating = (ratings: number[]): number => {\r\n  if (ratings.length === 0) return 0;\r\n  const sum = ratings.reduce((acc, rating) => acc + rating, 0);\r\n  return Math.round((sum / ratings.length) * 10) / 10;\r\n};\r\n\r\n/**\r\n * GÃ©nÃ¨re une distribution des notes\r\n */\r\nexport const generateRatingDistribution = (ratings: number[]): Record<number, number> => {\r\n  const distribution: Record<number, number> = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };\r\n  \r\n  ratings.forEach(rating => {\r\n    if (rating >= 1 && rating <= 5) {\r\n      distribution[rating]++;\r\n    }\r\n  });\r\n  \r\n  return distribution;\r\n};\r\n\r\n/**\r\n * Retourne l'User Agent du navigateur\r\n */\r\nexport const getUserAgent = (): string => {\r\n  return navigator.userAgent;\r\n};\r\n\r\n/**\r\n * Retourne l'adresse IP (approximative via service externe)\r\n */\r\nexport const getIpAddress = async (): Promise<string | null> => {\r\n  try {\r\n    const response = await fetch('https://api.ipify.org?format=json');\r\n    const data = await response.json();\r\n    return data.ip;\r\n  } catch (error) {\r\n    console.warn('Impossible de rÃ©cupÃ©rer l\\'IP:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Stocke une valeur dans le localStorage\r\n */\r\nexport const setLocalStorage = (key: string, value: any): void => {\r\n  try {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  } catch (error) {\r\n    console.warn('Erreur lors du stockage local:', error);\r\n  }\r\n};\r\n\r\n/**\r\n * RÃ©cupÃ¨re une valeur du localStorage\r\n */\r\nexport const getLocalStorage = <T>(key: string, defaultValue: T): T => {\r\n  try {\r\n    const item = localStorage.getItem(key);\r\n    return item ? JSON.parse(item) : defaultValue;\r\n  } catch (error) {\r\n    console.warn('Erreur lors de la rÃ©cupÃ©ration locale:', error);\r\n    return defaultValue;\r\n  }\r\n};\r\n\r\n/**\r\n * Supprime une valeur du localStorage\r\n */\r\nexport const removeLocalStorage = (key: string): void => {\r\n  try {\r\n    localStorage.removeItem(key);\r\n  } catch (error) {\r\n    console.warn('Erreur lors de la suppression locale:', error);\r\n  }\r\n};\r\n\r\n/**\r\n * DÃ©bounce une fonction\r\n */\r\nexport const debounce = <T extends (...args: any[]) => any>(\r\n  func: T,\r\n  wait: number\r\n): ((...args: Parameters<T>) => void) => {\r\n  let timeout: number;\r\n  \r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeout);\r\n    timeout = window.setTimeout(() => func(...args), wait);\r\n  };\r\n};\r\n\r\n/**\r\n * Retry une fonction avec dÃ©lai\r\n */\r\nexport const retry = async <T>(\r\n  fn: () => Promise<T>,\r\n  maxRetries: number = 3,\r\n  delay: number = 1000\r\n): Promise<T> => {\r\n  let lastError: Error = new Error('Une erreur est survenue');\r\n  \r\n  for (let i = 0; i < maxRetries; i++) {\r\n    try {\r\n      return await fn();\r\n    } catch (error) {\r\n      lastError = error as Error;\r\n      if (i < maxRetries - 1) {\r\n        await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, i)));\r\n      }\r\n    }\r\n  }\r\n  \r\n  throw new Error(lastError.message || 'Une erreur est survenue');\r\n};\r\n\r\n/**\r\n * Combine les classes CSS\r\n */\r\nexport const cn = (...classes: (string | undefined | null | false)[]): string => {\r\n  return classes.filter(Boolean).join(' ');\r\n}; ","import { db } from './firebase';\nimport { \n  collection, \n  doc, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  getDocs, \n  getDoc, \n  query, \n  where, \n  orderBy\n} from 'firebase/firestore';\n\nimport { Seance, CreateSeanceData, Film } from '../types';\nimport { generateId } from '../utils/helpers';\n\nconst SEANCES_COLLECTION = 'seances';\nconst FILMS_COLLECTION = 'films';\n\n/**\n * CrÃ©er une nouvelle sÃ©ance avec gÃ©nÃ©ration automatique du QR code\n */\nexport const createSeance = async (data: CreateSeanceData): Promise<Seance> => {\n  try {\n    // VÃ©rifier qu'il y a au moins 1 film et au plus 5\n    if (data.films.length < 1 || data.films.length > 5) {\n      throw new Error('Une sÃ©ance doit contenir entre 1 et 5 films');\n    }\n\n    // VÃ©rifier que tous les films existent\n    const filmsPromises = data.films.map(filmId => \n      getDoc(doc(db, FILMS_COLLECTION, filmId))\n    );\n    const filmsSnapshots = await Promise.all(filmsPromises);\n    \n    const nonExistentFilms = filmsSnapshots\n      .map((snapshot, index) => ({ snapshot, filmId: data.films[index] }))\n      .filter(({ snapshot }) => !snapshot.exists());\n    \n    if (nonExistentFilms.length > 0) {\n      throw new Error(`Films non trouvÃ©s: ${nonExistentFilms.map(f => f.filmId).join(', ')}`);\n    }\n\n    // GÃ©nÃ©rer l'URL du QR code\n    const seanceId = generateId();\n    const qrCodeUrl = generateQRCodeUrl(seanceId);\n\n    const seanceData: Omit<Seance, 'id'> = {\n      nom: data.nom,\n      date: data.date,\n      heure: data.heure,\n      films: data.films,\n      qrCodeUrl,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...(data.description && { description: data.description }),\n    };\n\n    const docRef = await addDoc(collection(db, SEANCES_COLLECTION), seanceData);\n    \n    return {\n      id: docRef.id,\n      ...seanceData,\n    };\n  } catch (error) {\n    console.error('Erreur lors de la crÃ©ation de la sÃ©ance:', error);\n    throw error;\n  }\n};\n\n/**\n * RÃ©cupÃ©rer toutes les sÃ©ances\n */\nexport const getAllSeances = async (): Promise<Seance[]> => {\n  try {\n    const q = query(\n      collection(db, SEANCES_COLLECTION),\n      orderBy('date', 'desc')\n    );\n    \n    const querySnapshot = await getDocs(q);\n    const seances: Seance[] = [];\n    \n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      seances.push({\n        id: doc.id,\n        nom: data.nom,\n        description: data.description,\n        date: data.date.toDate(),\n        heure: data.heure,\n        films: data.films,\n        qrCodeUrl: data.qrCodeUrl,\n        isActive: data.isActive,\n        createdAt: data.createdAt.toDate(),\n        updatedAt: data.updatedAt.toDate(),\n      });\n    });\n    \n    return seances;\n  } catch (error) {\n    console.error('Erreur lors de la rÃ©cupÃ©ration des sÃ©ances:', error);\n    throw error;\n  }\n};\n\n/**\n * RÃ©cupÃ©rer une sÃ©ance par son ID\n */\nexport const getSeanceById = async (seanceId: string): Promise<Seance | null> => {\n  try {\n    const docRef = doc(db, SEANCES_COLLECTION, seanceId);\n    const docSnap = await getDoc(docRef);\n    \n    if (docSnap.exists()) {\n      const data = docSnap.data();\n      return {\n        id: docSnap.id,\n        nom: data.nom,\n        description: data.description,\n        date: data.date.toDate(),\n        heure: data.heure,\n        films: data.films,\n        qrCodeUrl: data.qrCodeUrl,\n        isActive: data.isActive,\n        createdAt: data.createdAt.toDate(),\n        updatedAt: data.updatedAt.toDate(),\n      };\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Erreur lors de la rÃ©cupÃ©ration de la sÃ©ance:', error);\n    throw error;\n  }\n};\n\n/**\n * RÃ©cupÃ©rer une sÃ©ance avec ses films\n */\nexport const getSeanceWithFilms = async (seanceId: string): Promise<{ seance: Seance; films: Film[] } | null> => {\n  try {\n    const seance = await getSeanceById(seanceId);\n    if (!seance) return null;\n\n    // RÃ©cupÃ©rer tous les films de la sÃ©ance\n    const filmsPromises = seance.films.map(filmId => \n      getDoc(doc(db, FILMS_COLLECTION, filmId))\n    );\n    const filmsSnapshots = await Promise.all(filmsPromises);\n    \n    const films: Film[] = [];\n    \n    for (const snapshot of filmsSnapshots) {\n      if (snapshot.exists()) {\n        const data = snapshot.data();\n        if (data) {\n          films.push({\n            id: snapshot.id,\n            titre: data.titre,\n            realisateur: data.realisateur,\n            pays: data.pays,\n            duree: data.duree,\n            annee: data.annee,\n            synopsis: data.synopsis,\n            posterUrl: data.posterUrl,\n            genre: data.genre,\n            createdAt: data.createdAt.toDate(),\n            updatedAt: data.updatedAt.toDate(),\n          });\n        }\n      }\n    }\n\n    return { seance, films };\n  } catch (error) {\n    console.error('Erreur lors de la rÃ©cupÃ©ration de la sÃ©ance avec films:', error);\n    throw error;\n  }\n};\n\n/**\n * Mettre Ã  jour une sÃ©ance\n */\nexport const updateSeance = async (seanceId: string, data: Partial<CreateSeanceData>): Promise<void> => {\n  try {\n    console.log('Mise Ã  jour de la sÃ©ance:', seanceId, data);\n    \n    const docRef = doc(db, SEANCES_COLLECTION, seanceId);\n    \n    const updateData: any = {\n      updatedAt: new Date(),\n    };\n\n    // Ajouter les champs modifiÃ©s\n    if (data.nom !== undefined) updateData.nom = data.nom;\n    if (data.description !== undefined) updateData.description = data.description;\n    if (data.heure !== undefined) updateData.heure = data.heure;\n    if (data.films !== undefined) updateData.films = data.films;\n\n    // Traiter la date sÃ©parÃ©ment car elle doit Ãªtre un Timestamp Firestore\n    if (data.date !== undefined) {\n      updateData.date = data.date;\n    }\n\n    // Si les films changent, vÃ©rifier qu'il y en a au moins 1 et au plus 5\n    if (data.films && (data.films.length < 1 || data.films.length > 5)) {\n      throw new Error('Une sÃ©ance doit contenir entre 1 et 5 films');\n    }\n\n    console.log('DonnÃ©es de mise Ã  jour:', updateData);\n    await updateDoc(docRef, updateData);\n    console.log('SÃ©ance mise Ã  jour avec succÃ¨s');\n  } catch (error) {\n    console.error('Erreur lors de la mise Ã  jour de la sÃ©ance:', error);\n    throw error;\n  }\n};\n\n/**\n * Supprimer une sÃ©ance\n */\nexport const deleteSeance = async (seanceId: string): Promise<void> => {\n  try {\n    const docRef = doc(db, SEANCES_COLLECTION, seanceId);\n    await deleteDoc(docRef);\n  } catch (error) {\n    console.error('Erreur lors de la suppression de la sÃ©ance:', error);\n    throw error;\n  }\n};\n\n/**\n * Activer/dÃ©sactiver une sÃ©ance\n */\nexport const toggleSeanceActive = async (seanceId: string, isActive: boolean): Promise<void> => {\n  try {\n    const docRef = doc(db, SEANCES_COLLECTION, seanceId);\n    await updateDoc(docRef, {\n      isActive,\n      updatedAt: new Date(),\n    });\n  } catch (error) {\n    console.error('Erreur lors de la modification du statut de la sÃ©ance:', error);\n    throw error;\n  }\n};\n\n/**\n * RÃ©cupÃ©rer les sÃ©ances actives\n */\nexport const getActiveSeances = async (): Promise<Seance[]> => {\n  try {\n    const q = query(\n      collection(db, SEANCES_COLLECTION),\n      where('isActive', '==', true),\n      orderBy('date', 'desc')\n    );\n    \n    const querySnapshot = await getDocs(q);\n    const seances: Seance[] = [];\n    \n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      seances.push({\n        id: doc.id,\n        nom: data.nom,\n        description: data.description,\n        date: data.date.toDate(),\n        heure: data.heure,\n        films: data.films,\n        qrCodeUrl: data.qrCodeUrl,\n        isActive: data.isActive,\n        createdAt: data.createdAt.toDate(),\n        updatedAt: data.updatedAt.toDate(),\n      });\n    });\n    \n    return seances;\n  } catch (error) {\n    console.error('Erreur lors de la rÃ©cupÃ©ration des sÃ©ances actives:', error);\n    throw error;\n  }\n};\n\n/**\n * GÃ©nÃ©rer l'URL du QR code pour une sÃ©ance\n */\nexport const generateQRCodeUrl = (seanceId: string): string => {\n  const baseUrl = window.location.origin;\n  const seanceUrl = `${baseUrl}/seance/${seanceId}`;\n  \n  // Utiliser un service de gÃ©nÃ©ration de QR code\n  const qrServiceUrl = 'https://api.qrserver.com/v1/create-qr-code/';\n  const params = new URLSearchParams({\n    size: '300x300',\n    data: seanceUrl,\n    format: 'png',\n  });\n  \n  return `${qrServiceUrl}?${params.toString()}`;\n};\n\n/**\n * RÃ©cupÃ©rer les statistiques des sÃ©ances\n */\nexport const getSeancesStats = async (): Promise<{\n  total: number;\n  actives: number;\n  inactives: number;\n  cetteSemaine: number;\n}> => {\n  try {\n    const seances = await getAllSeances();\n    const maintenant = new Date();\n    const uneSemaine = new Date(maintenant.getTime() + 7 * 24 * 60 * 60 * 1000);\n    \n    const stats = {\n      total: seances.length,\n      actives: seances.filter(s => s.isActive).length,\n      inactives: seances.filter(s => !s.isActive).length,\n      cetteSemaine: seances.filter(s => s.date >= maintenant && s.date <= uneSemaine).length,\n    };\n    \n    return stats;\n  } catch (error) {\n    console.error('Erreur lors de la rÃ©cupÃ©ration des statistiques:', error);\n    throw error;\n  }\n};\n\n/**\n * Rechercher des sÃ©ances par nom\n */\nexport const searchSeances = async (searchTerm: string): Promise<Seance[]> => {\n  try {\n    const seances = await getAllSeances();\n    const term = searchTerm.toLowerCase();\n    \n    return seances.filter(seance => \n      seance.nom.toLowerCase().includes(term) ||\n      (seance.description && seance.description.toLowerCase().includes(term))\n    );\n  } catch (error) {\n    console.error('Erreur lors de la recherche de sÃ©ances:', error);\n    throw error;\n  }\n}; "],"names":["generateQRCode","async","seanceId","_seanceName","voteUrl","window","location","origin","QRCode","width","margin","color","dark","light","error","console","Error","AdminQRCodesPage","seances","setSeances","useState","loading","setLoading","qrCodes","setQrCodes","showSuccess","showError","useNotifications","loadSeances","useCallback","allSeances","getAllSeances","qrCodesData","seance","qrCode","id","nom","message","useEffect","handleDownloadQR","seanceName","qrCodeDataUrl","link","document","createElement","href","download","replace","toLowerCase","body","appendChild","click","removeChild","downloadQRCode","handlePrintQR","printWindow","open","write","close","focus","setTimeout","print","printQRCode","_jsx","className","children","_jsxs","Link","to","ArrowLeft","QrCode","length","filter","s","isActive","map","src","alt","date","toLocaleDateString","heure","films","onClick","Download","Printer","target","Eye","generateId","Date","now","toString","Math","random","substring","generateSessionId","getUserAgent","navigator","userAgent","getIpAddress","response","fetch","json","ip","warn","setLocalStorage","key","value","localStorage","setItem","JSON","stringify","getLocalStorage","defaultValue","item","getItem","parse","cn","_len2","arguments","classes","Array","_key2","Boolean","join","SEANCES_COLLECTION","FILMS_COLLECTION","createSeance","data","filmsPromises","filmId","getDoc","doc","db","nonExistentFilms","Promise","all","snapshot","index","_ref","exists","f","qrCodeUrl","generateQRCodeUrl","seanceData","createdAt","updatedAt","description","addDoc","collection","q","query","orderBy","querySnapshot","getDocs","forEach","push","toDate","getSeanceById","docRef","docSnap","updateSeance","log","updateData","undefined","updateDoc","deleteSeance","deleteDoc","toggleSeanceActive","baseUrl","URLSearchParams","size","format"],"sourceRoot":""}