922e8e9c3bbc6d6a949890a55a1f7775
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
jest.mock('../../contexts/AuthContext', () => ({
    ...jest.requireActual('../../contexts/AuthContext'),
    useAuth: () => mockUseAuth(),
}));
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const react_router_dom_1 = require("react-router-dom");
const PrivateRoute_1 = require("../../components/PrivateRoute");
const AuthContext_1 = require("../../contexts/AuthContext");
// Mock du contexte d'authentification
const mockUseAuth = jest.fn();
const TestComponent = () => (0, jsx_runtime_1.jsx)("div", { children: "Contenu prot\u00E9g\u00E9" });
const renderWithRouter = (component) => {
    return (0, react_2.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(AuthContext_1.AuthProvider, { children: component }) }));
};
describe('PrivateRoute', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('Authentification de base', () => {
        it('should render children when user is authenticated', () => {
            mockUseAuth.mockReturnValue({
                user: { uid: '123', email: 'test@example.com', isAdmin: false },
                loading: false,
            });
            renderWithRouter((0, jsx_runtime_1.jsx)(PrivateRoute_1.PrivateRoute, { children: (0, jsx_runtime_1.jsx)(TestComponent, {}) }));
            expect(react_2.screen.getByText('Contenu protégé')).toBeInTheDocument();
        });
        it('should redirect to login when user is not authenticated', () => {
            mockUseAuth.mockReturnValue({
                user: null,
                loading: false,
            });
            renderWithRouter((0, jsx_runtime_1.jsx)(PrivateRoute_1.PrivateRoute, { children: (0, jsx_runtime_1.jsx)(TestComponent, {}) }));
            // Vérifier que le contenu protégé n'est pas affiché
            expect(react_2.screen.queryByText('Contenu protégé')).not.toBeInTheDocument();
        });
        it('should show loading spinner when authentication is loading', () => {
            mockUseAuth.mockReturnValue({
                user: null,
                loading: true,
            });
            renderWithRouter((0, jsx_runtime_1.jsx)(PrivateRoute_1.PrivateRoute, { children: (0, jsx_runtime_1.jsx)(TestComponent, {}) }));
            expect(react_2.screen.getByText('Chargement...')).toBeInTheDocument();
            expect(react_2.screen.queryByText('Contenu protégé')).not.toBeInTheDocument();
        });
    });
    describe('Authentification admin', () => {
        it('should render children when user is admin', () => {
            mockUseAuth.mockReturnValue({
                user: { uid: '123', email: 'admin@example.com', isAdmin: true },
                loading: false,
            });
            renderWithRouter((0, jsx_runtime_1.jsx)(PrivateRoute_1.PrivateRoute, { requireAdmin: true, children: (0, jsx_runtime_1.jsx)(TestComponent, {}) }));
            expect(react_2.screen.getByText('Contenu protégé')).toBeInTheDocument();
        });
        it('should redirect non-admin users when requireAdmin is true', () => {
            mockUseAuth.mockReturnValue({
                user: { uid: '123', email: 'user@example.com', isAdmin: false },
                loading: false,
            });
            renderWithRouter((0, jsx_runtime_1.jsx)(PrivateRoute_1.PrivateRoute, { requireAdmin: true, children: (0, jsx_runtime_1.jsx)(TestComponent, {}) }));
            // Vérifier que le contenu protégé n'est pas affiché
            expect(react_2.screen.queryByText('Contenu protégé')).not.toBeInTheDocument();
        });
        it('should allow non-admin users when requireAdmin is false', () => {
            mockUseAuth.mockReturnValue({
                user: { uid: '123', email: 'user@example.com', isAdmin: false },
                loading: false,
            });
            renderWithRouter((0, jsx_runtime_1.jsx)(PrivateRoute_1.PrivateRoute, { requireAdmin: false, children: (0, jsx_runtime_1.jsx)(TestComponent, {}) }));
            expect(react_2.screen.getByText('Contenu protégé')).toBeInTheDocument();
        });
    });
    describe('États de chargement', () => {
        it('should show loading spinner with correct styling', () => {
            mockUseAuth.mockReturnValue({
                user: null,
                loading: true,
            });
            renderWithRouter((0, jsx_runtime_1.jsx)(PrivateRoute_1.PrivateRoute, { children: (0, jsx_runtime_1.jsx)(TestComponent, {}) }));
            const loadingSpinner = react_2.screen.getByText('Chargement...');
            expect(loadingSpinner).toBeInTheDocument();
            // Vérifier que le spinner est dans un conteneur centré
            const container = loadingSpinner.closest('div');
            expect(container).toHaveClass('min-h-screen', 'flex', 'items-center', 'justify-center');
        });
        it('should show loading spinner even when user is authenticated but still loading', () => {
            mockUseAuth.mockReturnValue({
                user: { uid: '123', email: 'test@example.com', isAdmin: false },
                loading: true,
            });
            renderWithRouter((0, jsx_runtime_1.jsx)(PrivateRoute_1.PrivateRoute, { children: (0, jsx_runtime_1.jsx)(TestComponent, {}) }));
            expect(react_2.screen.getByText('Chargement...')).toBeInTheDocument();
            expect(react_2.screen.queryByText('Contenu protégé')).not.toBeInTheDocument();
        });
    });
    describe('Gestion des erreurs', () => {
        it('should handle undefined user gracefully', () => {
            mockUseAuth.mockReturnValue({
                user: undefined,
                loading: false,
            });
            renderWithRouter((0, jsx_runtime_1.jsx)(PrivateRoute_1.PrivateRoute, { children: (0, jsx_runtime_1.jsx)(TestComponent, {}) }));
            expect(react_2.screen.queryByText('Contenu protégé')).not.toBeInTheDocument();
        });
        it('should handle user without isAdmin property', () => {
            mockUseAuth.mockReturnValue({
                user: { uid: '123', email: 'test@example.com' },
                loading: false,
            });
            renderWithRouter((0, jsx_runtime_1.jsx)(PrivateRoute_1.PrivateRoute, { requireAdmin: true, children: (0, jsx_runtime_1.jsx)(TestComponent, {}) }));
            // Devrait rediriger car isAdmin n'est pas défini
            expect(react_2.screen.queryByText('Contenu protégé')).not.toBeInTheDocument();
        });
    });
    describe('Accessibilité', () => {
        it('should have proper ARIA attributes for loading state', () => {
            mockUseAuth.mockReturnValue({
                user: null,
                loading: true,
            });
            renderWithRouter((0, jsx_runtime_1.jsx)(PrivateRoute_1.PrivateRoute, { children: (0, jsx_runtime_1.jsx)(TestComponent, {}) }));
            const loadingText = react_2.screen.getByText('Chargement...');
            expect(loadingText).toBeInTheDocument();
            // Vérifier que le texte est accessible
            expect(loadingText).toHaveAttribute('class');
        });
        it('should maintain focus management during loading', () => {
            mockUseAuth.mockReturnValue({
                user: null,
                loading: true,
            });
            renderWithRouter((0, jsx_runtime_1.jsx)(PrivateRoute_1.PrivateRoute, { children: (0, jsx_runtime_1.jsx)(TestComponent, {}) }));
            // Le focus devrait rester dans le conteneur de chargement
            const container = react_2.screen.getByText('Chargement...').closest('div');
            expect(container).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,