{"file":"D:\\Documents\\aiprojets\\votepublic\\src\\hooks\\useFilms.ts","mappings":"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","names":[],"sources":["D:\\Documents\\aiprojets\\votepublic\\src\\hooks\\useFilms.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Film } from '../types';\nimport { getAllFilms, createFilm as createFilmService, updateFilm, deleteFilm } from '../services/filmService';\nimport toast from 'react-hot-toast';\n\nexport const useFilms = () => {\n  const [films, setFilms] = useState<Film[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Charger les films\n  const loadFilms = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const filmsData = await getAllFilms();\n      setFilms(filmsData);\n    } catch (err: any) {\n      setError(err.message);\n      toast.error('Erreur lors du chargement des films');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Ajouter un film\n  const createFilm = async (filmData: any) => {\n    try {\n      const newFilm = await createFilmService(filmData);\n      setFilms(prev => [...prev, newFilm]);\n      toast.success('Film ajouté avec succès');\n      return newFilm;\n    } catch (err: any) {\n      toast.error('Erreur lors de l\\'ajout du film');\n      throw err;\n    }\n  };\n\n  // Mettre à jour un film\n  const editFilm = async (id: string, updates: any) => {\n    try {\n      await updateFilm(id, updates);\n      setFilms(prev => prev.map(film => film.id === id ? { ...film, ...updates } : film));\n      toast.success('Film mis à jour avec succès');\n    } catch (err: any) {\n      toast.error('Erreur lors de la mise à jour du film');\n      throw err;\n    }\n  };\n\n  // Supprimer un film\n  const removeFilm = async (id: string) => {\n    try {\n      await deleteFilm(id);\n      setFilms(prev => prev.filter(film => film.id !== id));\n      toast.success('Film supprimé avec succès');\n    } catch (err: any) {\n      toast.error('Erreur lors de la suppression du film');\n      throw err;\n    }\n  };\n\n  // Rechercher des films\n  const searchFilms = (query: string): Film[] => {\n    if (!query.trim()) return films;\n    \n    const lowercaseQuery = query.toLowerCase();\n    return films.filter(film => \n      film.titre.toLowerCase().includes(lowercaseQuery) ||\n      film.realisateur.toLowerCase().includes(lowercaseQuery) ||\n      film.synopsis.toLowerCase().includes(lowercaseQuery)\n    );\n  };\n\n  // Charger les films au montage\n  useEffect(() => {\n    loadFilms();\n  }, []);\n\n  return {\n    films,\n    loading,\n    error,\n    loadFilms,\n    createFilm,\n    editFilm,\n    removeFilm,\n    searchFilms,\n  };\n}; "],"version":3}