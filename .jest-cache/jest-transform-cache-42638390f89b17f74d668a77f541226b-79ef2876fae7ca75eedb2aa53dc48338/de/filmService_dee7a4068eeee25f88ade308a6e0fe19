6703623ba5bfc99fc6452e4480fa351e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAvailableCountries = exports.getFilmsByIds = exports.getAvailableGenres = exports.getFilmsStats = exports.getRecentFilms = exports.getFilmsByGenre = exports.searchFilms = exports.deletePoster = exports.uploadPoster = exports.deleteFilm = exports.updateFilm = exports.getFilmById = exports.getAllFilms = exports.createFilm = void 0;
const firebase_1 = require("./firebase");
const firestore_1 = require("firebase/firestore");
const storage_1 = require("firebase/storage");
const helpers_1 = require("../utils/helpers");
const FILMS_COLLECTION = 'films';
const POSTERS_FOLDER = 'posters';
/**
 * Créer un nouveau film avec upload du poster
 */
const createFilm = async (data) => {
    try {
        let posterUrl;
        // Upload du poster si fourni
        if (data.poster) {
            posterUrl = await (0, exports.uploadPoster)(data.poster);
        }
        const filmData = {
            titre: data.titre,
            realisateur: data.realisateur,
            pays: data.pays,
            duree: data.duree,
            annee: data.annee,
            synopsis: data.synopsis,
            posterUrl,
            genre: data.genre,
            createdAt: new Date(),
            updatedAt: new Date(),
        };
        const docRef = await (0, firestore_1.addDoc)((0, firestore_1.collection)(firebase_1.db, FILMS_COLLECTION), filmData);
        return {
            id: docRef.id,
            ...filmData,
        };
    }
    catch (error) {
        console.error('Erreur lors de la création du film:', error);
        throw error;
    }
};
exports.createFilm = createFilm;
/**
 * Récupérer tous les films
 */
const getAllFilms = async () => {
    try {
        const q = (0, firestore_1.query)((0, firestore_1.collection)(firebase_1.db, FILMS_COLLECTION), (0, firestore_1.orderBy)('titre', 'asc'));
        const querySnapshot = await (0, firestore_1.getDocs)(q);
        const films = [];
        querySnapshot.forEach((doc) => {
            const data = doc.data();
            films.push({
                id: doc.id,
                titre: data.titre,
                realisateur: data.realisateur,
                pays: data.pays,
                duree: data.duree,
                annee: data.annee,
                synopsis: data.synopsis,
                posterUrl: data.posterUrl,
                genre: data.genre,
                createdAt: data.createdAt.toDate(),
                updatedAt: data.updatedAt.toDate(),
            });
        });
        return films;
    }
    catch (error) {
        console.error('Erreur lors de la récupération des films:', error);
        throw error;
    }
};
exports.getAllFilms = getAllFilms;
/**
 * Récupérer un film par son ID
 */
const getFilmById = async (filmId) => {
    try {
        const docRef = (0, firestore_1.doc)(firebase_1.db, FILMS_COLLECTION, filmId);
        const docSnap = await (0, firestore_1.getDoc)(docRef);
        if (docSnap.exists()) {
            const data = docSnap.data();
            return {
                id: docSnap.id,
                titre: data.titre,
                realisateur: data.realisateur,
                pays: data.pays,
                duree: data.duree,
                annee: data.annee,
                synopsis: data.synopsis,
                posterUrl: data.posterUrl,
                genre: data.genre,
                createdAt: data.createdAt.toDate(),
                updatedAt: data.updatedAt.toDate(),
            };
        }
        return null;
    }
    catch (error) {
        console.error('Erreur lors de la récupération du film:', error);
        throw error;
    }
};
exports.getFilmById = getFilmById;
/**
 * Mettre à jour un film
 */
const updateFilm = async (filmId, data) => {
    try {
        const docRef = (0, firestore_1.doc)(firebase_1.db, FILMS_COLLECTION, filmId);
        const updateData = {
            ...data,
            updatedAt: new Date(),
        };
        // Upload du nouveau poster si fourni
        if (data.poster) {
            updateData.posterUrl = await (0, exports.uploadPoster)(data.poster);
        }
        await (0, firestore_1.updateDoc)(docRef, updateData);
    }
    catch (error) {
        console.error('Erreur lors de la mise à jour du film:', error);
        throw error;
    }
};
exports.updateFilm = updateFilm;
/**
 * Supprimer un film
 */
const deleteFilm = async (filmId) => {
    try {
        // Récupérer le film pour supprimer le poster
        const film = await (0, exports.getFilmById)(filmId);
        if (film?.posterUrl) {
            await (0, exports.deletePoster)(film.posterUrl);
        }
        const docRef = (0, firestore_1.doc)(firebase_1.db, FILMS_COLLECTION, filmId);
        await (0, firestore_1.deleteDoc)(docRef);
    }
    catch (error) {
        console.error('Erreur lors de la suppression du film:', error);
        throw error;
    }
};
exports.deleteFilm = deleteFilm;
/**
 * Upload d'un poster
 */
const uploadPoster = async (file) => {
    try {
        const fileName = `${(0, helpers_1.generateId)()}_${file.name}`;
        const storageRef = (0, storage_1.ref)(firebase_1.storage, `${POSTERS_FOLDER}/${fileName}`);
        const snapshot = await (0, storage_1.uploadBytes)(storageRef, file);
        const downloadURL = await (0, storage_1.getDownloadURL)(snapshot.ref);
        return downloadURL;
    }
    catch (error) {
        console.error('Erreur lors de l\'upload du poster:', error);
        throw error;
    }
};
exports.uploadPoster = uploadPoster;
/**
 * Supprimer un poster
 */
const deletePoster = async (posterUrl) => {
    try {
        const storageRef = (0, storage_1.ref)(firebase_1.storage, posterUrl);
        await (0, storage_1.deleteObject)(storageRef);
    }
    catch (error) {
        console.error('Erreur lors de la suppression du poster:', error);
        // Ne pas throw l'erreur car ce n'est pas critique
    }
};
exports.deletePoster = deletePoster;
/**
 * Rechercher des films
 */
const searchFilms = async (searchTerm) => {
    try {
        const films = await (0, exports.getAllFilms)();
        const term = searchTerm.toLowerCase();
        return films.filter(film => film.titre.toLowerCase().includes(term) ||
            film.realisateur.toLowerCase().includes(term) ||
            film.pays.toLowerCase().includes(term) ||
            film.genre.toLowerCase().includes(term));
    }
    catch (error) {
        console.error('Erreur lors de la recherche de films:', error);
        throw error;
    }
};
exports.searchFilms = searchFilms;
/**
 * Récupérer les films par genre
 */
const getFilmsByGenre = async (genre) => {
    try {
        const q = (0, firestore_1.query)((0, firestore_1.collection)(firebase_1.db, FILMS_COLLECTION), (0, firestore_1.where)('genre', '==', genre), (0, firestore_1.orderBy)('titre', 'asc'));
        const querySnapshot = await (0, firestore_1.getDocs)(q);
        const films = [];
        querySnapshot.forEach((doc) => {
            const data = doc.data();
            films.push({
                id: doc.id,
                titre: data.titre,
                realisateur: data.realisateur,
                pays: data.pays,
                duree: data.duree,
                annee: data.annee,
                synopsis: data.synopsis,
                posterUrl: data.posterUrl,
                genre: data.genre,
                createdAt: data.createdAt.toDate(),
                updatedAt: data.updatedAt.toDate(),
            });
        });
        return films;
    }
    catch (error) {
        console.error('Erreur lors de la récupération des films par genre:', error);
        throw error;
    }
};
exports.getFilmsByGenre = getFilmsByGenre;
/**
 * Récupérer les films récents
 */
const getRecentFilms = async (limitCount = 10) => {
    try {
        const q = (0, firestore_1.query)((0, firestore_1.collection)(firebase_1.db, FILMS_COLLECTION), (0, firestore_1.orderBy)('createdAt', 'desc'), (0, firestore_1.limit)(limitCount));
        const querySnapshot = await (0, firestore_1.getDocs)(q);
        const films = [];
        querySnapshot.forEach((doc) => {
            const data = doc.data();
            films.push({
                id: doc.id,
                titre: data.titre,
                realisateur: data.realisateur,
                pays: data.pays,
                duree: data.duree,
                annee: data.annee,
                synopsis: data.synopsis,
                posterUrl: data.posterUrl,
                genre: data.genre,
                createdAt: data.createdAt.toDate(),
                updatedAt: data.updatedAt.toDate(),
            });
        });
        return films;
    }
    catch (error) {
        console.error('Erreur lors de la récupération des films récents:', error);
        throw error;
    }
};
exports.getRecentFilms = getRecentFilms;
/**
 * Récupérer les statistiques des films
 */
const getFilmsStats = async () => {
    try {
        const films = await (0, exports.getAllFilms)();
        const stats = {
            total: films.length,
            parGenre: {},
            parPays: {},
            parAnnee: {},
        };
        films.forEach(film => {
            // Compter par genre
            stats.parGenre[film.genre] = (stats.parGenre[film.genre] || 0) + 1;
            // Compter par pays
            stats.parPays[film.pays] = (stats.parPays[film.pays] || 0) + 1;
            // Compter par année
            stats.parAnnee[film.annee] = (stats.parAnnee[film.annee] || 0) + 1;
        });
        return stats;
    }
    catch (error) {
        console.error('Erreur lors de la récupération des statistiques des films:', error);
        throw error;
    }
};
exports.getFilmsStats = getFilmsStats;
/**
 * Récupérer les genres disponibles
 */
const getAvailableGenres = async () => {
    try {
        const films = await (0, exports.getAllFilms)();
        const genres = Array.from(new Set(films.map(film => film.genre)));
        return genres.sort();
    }
    catch (error) {
        console.error('Erreur lors de la récupération des genres:', error);
        throw error;
    }
};
exports.getAvailableGenres = getAvailableGenres;
/**
 * Récupérer plusieurs films par leurs IDs
 */
const getFilmsByIds = async (filmIds) => {
    try {
        if (filmIds.length === 0)
            return [];
        // Récupérer les films en parallèle
        const filmPromises = filmIds.map(id => (0, exports.getFilmById)(id));
        const films = await Promise.all(filmPromises);
        // Filtrer les films null et retourner
        return films.filter((film) => film !== null);
    }
    catch (error) {
        console.error('Erreur lors de la récupération des films par IDs:', error);
        throw error;
    }
};
exports.getFilmsByIds = getFilmsByIds;
/**
 * Récupérer les pays disponibles
 */
const getAvailableCountries = async () => {
    try {
        const films = await (0, exports.getAllFilms)();
        const countries = Array.from(new Set(films.map(film => film.pays)));
        return countries.sort();
    }
    catch (error) {
        console.error('Erreur lors de la récupération des pays:', error);
        throw error;
    }
};
exports.getAvailableCountries = getAvailableCountries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,