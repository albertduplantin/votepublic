{"file":"D:\\Documents\\aiprojets\\votepublic\\src\\services\\filmService.ts","mappings":"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","names":[],"sources":["D:\\Documents\\aiprojets\\votepublic\\src\\services\\filmService.ts"],"sourcesContent":["import { db, storage } from './firebase';\nimport { \n  collection, \n  doc, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  getDocs, \n  getDoc, \n  query, \n  where, \n  orderBy,\n  limit\n} from 'firebase/firestore';\nimport { ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';\nimport { Film, CreateFilmData } from '../types';\nimport { generateId } from '../utils/helpers';\n\nconst FILMS_COLLECTION = 'films';\nconst POSTERS_FOLDER = 'posters';\n\n/**\n * Créer un nouveau film avec upload du poster\n */\nexport const createFilm = async (data: CreateFilmData): Promise<Film> => {\n  try {\n    let posterUrl: string | undefined;\n\n    // Upload du poster si fourni\n    if (data.poster) {\n      posterUrl = await uploadPoster(data.poster);\n    }\n\n    const filmData: Omit<Film, 'id'> = {\n      titre: data.titre,\n      realisateur: data.realisateur,\n      pays: data.pays,\n      duree: data.duree,\n      annee: data.annee,\n      synopsis: data.synopsis,\n      posterUrl,\n      genre: data.genre,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    const docRef = await addDoc(collection(db, FILMS_COLLECTION), filmData);\n    \n    return {\n      id: docRef.id,\n      ...filmData,\n    };\n  } catch (error) {\n    console.error('Erreur lors de la création du film:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupérer tous les films\n */\nexport const getAllFilms = async (): Promise<Film[]> => {\n  try {\n    const q = query(\n      collection(db, FILMS_COLLECTION),\n      orderBy('titre', 'asc')\n    );\n    \n    const querySnapshot = await getDocs(q);\n    const films: Film[] = [];\n    \n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      films.push({\n        id: doc.id,\n        titre: data.titre,\n        realisateur: data.realisateur,\n        pays: data.pays,\n        duree: data.duree,\n        annee: data.annee,\n        synopsis: data.synopsis,\n        posterUrl: data.posterUrl,\n        genre: data.genre,\n        createdAt: data.createdAt.toDate(),\n        updatedAt: data.updatedAt.toDate(),\n      });\n    });\n    \n    return films;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des films:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupérer un film par son ID\n */\nexport const getFilmById = async (filmId: string): Promise<Film | null> => {\n  try {\n    const docRef = doc(db, FILMS_COLLECTION, filmId);\n    const docSnap = await getDoc(docRef);\n    \n    if (docSnap.exists()) {\n      const data = docSnap.data();\n      return {\n        id: docSnap.id,\n        titre: data.titre,\n        realisateur: data.realisateur,\n        pays: data.pays,\n        duree: data.duree,\n        annee: data.annee,\n        synopsis: data.synopsis,\n        posterUrl: data.posterUrl,\n        genre: data.genre,\n        createdAt: data.createdAt.toDate(),\n        updatedAt: data.updatedAt.toDate(),\n      };\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Erreur lors de la récupération du film:', error);\n    throw error;\n  }\n};\n\n/**\n * Mettre à jour un film\n */\nexport const updateFilm = async (filmId: string, data: Partial<CreateFilmData>): Promise<void> => {\n  try {\n    const docRef = doc(db, FILMS_COLLECTION, filmId);\n    \n    const updateData: any = {\n      ...data,\n      updatedAt: new Date(),\n    };\n\n    // Upload du nouveau poster si fourni\n    if (data.poster) {\n      updateData.posterUrl = await uploadPoster(data.poster);\n    }\n\n    await updateDoc(docRef, updateData);\n  } catch (error) {\n    console.error('Erreur lors de la mise à jour du film:', error);\n    throw error;\n  }\n};\n\n/**\n * Supprimer un film\n */\nexport const deleteFilm = async (filmId: string): Promise<void> => {\n  try {\n    // Récupérer le film pour supprimer le poster\n    const film = await getFilmById(filmId);\n    if (film?.posterUrl) {\n      await deletePoster(film.posterUrl);\n    }\n\n    const docRef = doc(db, FILMS_COLLECTION, filmId);\n    await deleteDoc(docRef);\n  } catch (error) {\n    console.error('Erreur lors de la suppression du film:', error);\n    throw error;\n  }\n};\n\n/**\n * Upload d'un poster\n */\nexport const uploadPoster = async (file: File): Promise<string> => {\n  try {\n    const fileName = `${generateId()}_${file.name}`;\n    const storageRef = ref(storage, `${POSTERS_FOLDER}/${fileName}`);\n    \n    const snapshot = await uploadBytes(storageRef, file);\n    const downloadURL = await getDownloadURL(snapshot.ref);\n    \n    return downloadURL;\n  } catch (error) {\n    console.error('Erreur lors de l\\'upload du poster:', error);\n    throw error;\n  }\n};\n\n/**\n * Supprimer un poster\n */\nexport const deletePoster = async (posterUrl: string): Promise<void> => {\n  try {\n    const storageRef = ref(storage, posterUrl);\n    await deleteObject(storageRef);\n  } catch (error) {\n    console.error('Erreur lors de la suppression du poster:', error);\n    // Ne pas throw l'erreur car ce n'est pas critique\n  }\n};\n\n/**\n * Rechercher des films\n */\nexport const searchFilms = async (searchTerm: string): Promise<Film[]> => {\n  try {\n    const films = await getAllFilms();\n    const term = searchTerm.toLowerCase();\n    \n    return films.filter(film => \n      film.titre.toLowerCase().includes(term) ||\n      film.realisateur.toLowerCase().includes(term) ||\n      film.pays.toLowerCase().includes(term) ||\n      film.genre.toLowerCase().includes(term)\n    );\n  } catch (error) {\n    console.error('Erreur lors de la recherche de films:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupérer les films par genre\n */\nexport const getFilmsByGenre = async (genre: string): Promise<Film[]> => {\n  try {\n    const q = query(\n      collection(db, FILMS_COLLECTION),\n      where('genre', '==', genre),\n      orderBy('titre', 'asc')\n    );\n    \n    const querySnapshot = await getDocs(q);\n    const films: Film[] = [];\n    \n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      films.push({\n        id: doc.id,\n        titre: data.titre,\n        realisateur: data.realisateur,\n        pays: data.pays,\n        duree: data.duree,\n        annee: data.annee,\n        synopsis: data.synopsis,\n        posterUrl: data.posterUrl,\n        genre: data.genre,\n        createdAt: data.createdAt.toDate(),\n        updatedAt: data.updatedAt.toDate(),\n      });\n    });\n    \n    return films;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des films par genre:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupérer les films récents\n */\nexport const getRecentFilms = async (limitCount: number = 10): Promise<Film[]> => {\n  try {\n    const q = query(\n      collection(db, FILMS_COLLECTION),\n      orderBy('createdAt', 'desc'),\n      limit(limitCount)\n    );\n    \n    const querySnapshot = await getDocs(q);\n    const films: Film[] = [];\n    \n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      films.push({\n        id: doc.id,\n        titre: data.titre,\n        realisateur: data.realisateur,\n        pays: data.pays,\n        duree: data.duree,\n        annee: data.annee,\n        synopsis: data.synopsis,\n        posterUrl: data.posterUrl,\n        genre: data.genre,\n        createdAt: data.createdAt.toDate(),\n        updatedAt: data.updatedAt.toDate(),\n      });\n    });\n    \n    return films;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des films récents:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupérer les statistiques des films\n */\nexport const getFilmsStats = async (): Promise<{\n  total: number;\n  parGenre: Record<string, number>;\n  parPays: Record<string, number>;\n  parAnnee: Record<number, number>;\n}> => {\n  try {\n    const films = await getAllFilms();\n    \n    const stats = {\n      total: films.length,\n      parGenre: {} as Record<string, number>,\n      parPays: {} as Record<string, number>,\n      parAnnee: {} as Record<number, number>,\n    };\n    \n    films.forEach(film => {\n      // Compter par genre\n      stats.parGenre[film.genre] = (stats.parGenre[film.genre] || 0) + 1;\n      \n      // Compter par pays\n      stats.parPays[film.pays] = (stats.parPays[film.pays] || 0) + 1;\n      \n      // Compter par année\n      stats.parAnnee[film.annee] = (stats.parAnnee[film.annee] || 0) + 1;\n    });\n    \n    return stats;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des statistiques des films:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupérer les genres disponibles\n */\nexport const getAvailableGenres = async (): Promise<string[]> => {\n  try {\n    const films = await getAllFilms();\n    const genres = Array.from(new Set(films.map(film => film.genre)));\n    return genres.sort();\n  } catch (error) {\n    console.error('Erreur lors de la récupération des genres:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupérer plusieurs films par leurs IDs\n */\nexport const getFilmsByIds = async (filmIds: string[]): Promise<Film[]> => {\n  try {\n    if (filmIds.length === 0) return [];\n    \n    // Récupérer les films en parallèle\n    const filmPromises = filmIds.map(id => getFilmById(id));\n    const films = await Promise.all(filmPromises);\n    \n    // Filtrer les films null et retourner\n    return films.filter((film): film is Film => film !== null);\n  } catch (error) {\n    console.error('Erreur lors de la récupération des films par IDs:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupérer les pays disponibles\n */\nexport const getAvailableCountries = async (): Promise<string[]> => {\n  try {\n    const films = await getAllFilms();\n    const countries = Array.from(new Set(films.map(film => film.pays)));\n    return countries.sort();\n  } catch (error) {\n    console.error('Erreur lors de la récupération des pays:', error);\n    throw error;\n  }\n}; "],"version":3}