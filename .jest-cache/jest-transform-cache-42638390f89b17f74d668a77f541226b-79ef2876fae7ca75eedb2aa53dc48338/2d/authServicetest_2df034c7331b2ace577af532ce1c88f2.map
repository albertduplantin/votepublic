{"file":"D:\\Documents\\aiprojets\\votepublic\\src\\__tests__\\services\\authService.test.ts","mappings":"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","names":[],"sources":["D:\\Documents\\aiprojets\\votepublic\\src\\__tests__\\services\\authService.test.ts"],"sourcesContent":["import {\r\n  loginWithEmail,\r\n  registerWithEmail,\r\n  loginWithGoogle,\r\n  logout,\r\n  resetPassword,\r\n  updateUserProfile,\r\n  getUserData,\r\n} from '../../services/authService';\r\nimport { auth, db } from '../../services/firebase';\r\nimport { User, LoginFormData, RegisterFormData } from '../../types';\r\n\r\n// Mock Firebase\r\njest.mock('../../services/firebase', () => ({\r\n  auth: {\r\n    currentUser: null,\r\n    onAuthStateChanged: jest.fn(),\r\n  },\r\n  db: {\r\n    collection: jest.fn(),\r\n    doc: jest.fn(),\r\n  },\r\n}));\r\n\r\n// Mock Firebase Auth\r\nconst mockSignInWithEmailAndPassword = jest.fn();\r\nconst mockCreateUserWithEmailAndPassword = jest.fn();\r\nconst mockSignInWithPopup = jest.fn();\r\nconst mockSignOut = jest.fn();\r\nconst mockSendPasswordResetEmail = jest.fn();\r\nconst mockUpdateProfile = jest.fn();\r\nconst mockOnAuthStateChanged = jest.fn();\r\n\r\njest.mock('firebase/auth', () => ({\r\n  signInWithEmailAndPassword: mockSignInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword: mockCreateUserWithEmailAndPassword,\r\n  signInWithPopup: mockSignInWithPopup,\r\n  signOut: mockSignOut,\r\n  sendPasswordResetEmail: mockSendPasswordResetEmail,\r\n  updateProfile: mockUpdateProfile,\r\n  onAuthStateChanged: mockOnAuthStateChanged,\r\n  GoogleAuthProvider: jest.fn(),\r\n}));\r\n\r\n// Mock Firestore\r\nconst mockSetDoc = jest.fn();\r\nconst mockGetDoc = jest.fn();\r\nconst mockUpdateDoc = jest.fn();\r\n\r\njest.mock('firebase/firestore', () => ({\r\n  doc: jest.fn(),\r\n  setDoc: mockSetDoc,\r\n  getDoc: mockGetDoc,\r\n  updateDoc: mockUpdateDoc,\r\n}));\r\n\r\ndescribe('AuthService', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('loginWithEmail', () => {\r\n    const loginData: LoginFormData = {\r\n      email: 'test@example.com',\r\n      password: 'password123',\r\n    };\r\n\r\n    it('should login successfully with valid credentials', async () => {\r\n      const mockUser = {\r\n        uid: 'user123',\r\n        email: 'test@example.com',\r\n      };\r\n\r\n      const mockUserData: User = {\r\n        uid: 'user123',\r\n        email: 'test@example.com',\r\n        displayName: 'Test User',\r\n        isAdmin: false,\r\n        createdAt: new Date(),\r\n      };\r\n\r\n      mockSignInWithEmailAndPassword.mockResolvedValue({\r\n        user: mockUser,\r\n      });\r\n\r\n      mockGetDoc.mockResolvedValue({\r\n        exists: () => true,\r\n        data: () => ({\r\n          email: 'test@example.com',\r\n          displayName: 'Test User',\r\n          isAdmin: false,\r\n          createdAt: new Date(),\r\n        }),\r\n      });\r\n\r\n      const result = await loginWithEmail(loginData);\r\n\r\n      expect(mockSignInWithEmailAndPassword).toHaveBeenCalledWith(\r\n        auth,\r\n        loginData.email,\r\n        loginData.password\r\n      );\r\n      expect(result).toEqual(mockUserData);\r\n    });\r\n\r\n    it('should throw error for invalid credentials', async () => {\r\n      const error = { code: 'auth/wrong-password' };\r\n      mockSignInWithEmailAndPassword.mockRejectedValue(error);\r\n\r\n      await expect(loginWithEmail(loginData)).rejects.toThrow(\r\n        'Mot de passe incorrect.'\r\n      );\r\n    });\r\n\r\n    it('should throw error for user not found', async () => {\r\n      const error = { code: 'auth/user-not-found' };\r\n      mockSignInWithEmailAndPassword.mockRejectedValue(error);\r\n\r\n      await expect(loginWithEmail(loginData)).rejects.toThrow(\r\n        'Aucun utilisateur trouvé avec cet email.'\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('registerWithEmail', () => {\r\n    const registerData: RegisterFormData = {\r\n      email: 'newuser@example.com',\r\n      password: 'password123',\r\n      confirmPassword: 'password123',\r\n    };\r\n\r\n    it('should register successfully with valid data', async () => {\r\n      const mockUser = {\r\n        uid: 'newuser123',\r\n        email: 'newuser@example.com',\r\n      };\r\n\r\n      mockCreateUserWithEmailAndPassword.mockResolvedValue({\r\n        user: mockUser,\r\n      });\r\n\r\n      mockSetDoc.mockResolvedValue(undefined);\r\n\r\n      const result = await registerWithEmail(registerData);\r\n\r\n      expect(mockCreateUserWithEmailAndPassword).toHaveBeenCalledWith(\r\n        auth,\r\n        registerData.email,\r\n        registerData.password\r\n      );\r\n      expect(mockSetDoc).toHaveBeenCalled();\r\n      expect(result.uid).toBe('newuser123');\r\n      expect(result.email).toBe('newuser@example.com');\r\n      expect(result.isAdmin).toBe(false);\r\n    });\r\n\r\n    it('should throw error for weak password', async () => {\r\n      const error = { code: 'auth/weak-password' };\r\n      mockCreateUserWithEmailAndPassword.mockRejectedValue(error);\r\n\r\n      await expect(registerWithEmail(registerData)).rejects.toThrow(\r\n        'Le mot de passe doit contenir au moins 6 caractères.'\r\n      );\r\n    });\r\n\r\n    it('should throw error for email already in use', async () => {\r\n      const error = { code: 'auth/email-already-in-use' };\r\n      mockCreateUserWithEmailAndPassword.mockRejectedValue(error);\r\n\r\n      await expect(registerWithEmail(registerData)).rejects.toThrow(\r\n        'Cet email est déjà utilisé.'\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('loginWithGoogle', () => {\r\n    it('should login successfully with Google', async () => {\r\n      const mockUser = {\r\n        uid: 'googleuser123',\r\n        email: 'google@example.com',\r\n        displayName: 'Google User',\r\n        photoURL: 'https://example.com/photo.jpg',\r\n      };\r\n\r\n      const mockUserData: User = {\r\n        uid: 'googleuser123',\r\n        email: 'google@example.com',\r\n        displayName: 'Google User',\r\n        photoURL: 'https://example.com/photo.jpg',\r\n        isAdmin: false,\r\n        createdAt: new Date(),\r\n      };\r\n\r\n      mockSignInWithPopup.mockResolvedValue({\r\n        user: mockUser,\r\n      });\r\n\r\n      mockGetDoc.mockResolvedValue({\r\n        exists: () => true,\r\n        data: () => ({\r\n          email: 'google@example.com',\r\n          displayName: 'Google User',\r\n          photoURL: 'https://example.com/photo.jpg',\r\n          isAdmin: false,\r\n          createdAt: new Date(),\r\n        }),\r\n      });\r\n\r\n      const result = await loginWithGoogle();\r\n\r\n      expect(mockSignInWithPopup).toHaveBeenCalled();\r\n      expect(result).toEqual(mockUserData);\r\n    });\r\n\r\n    it('should create new user if Google user does not exist', async () => {\r\n      const mockUser = {\r\n        uid: 'newgoogleuser123',\r\n        email: 'newgoogle@example.com',\r\n        displayName: 'New Google User',\r\n        photoURL: 'https://example.com/photo.jpg',\r\n      };\r\n\r\n      mockSignInWithPopup.mockResolvedValue({\r\n        user: mockUser,\r\n      });\r\n\r\n      mockGetDoc.mockResolvedValue({\r\n        exists: () => false,\r\n      });\r\n\r\n      mockSetDoc.mockResolvedValue(undefined);\r\n\r\n      const result = await loginWithGoogle();\r\n\r\n      expect(mockSetDoc).toHaveBeenCalled();\r\n      expect(result.uid).toBe('newgoogleuser123');\r\n      expect(result.email).toBe('newgoogle@example.com');\r\n      expect(result.isAdmin).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('logout', () => {\r\n    it('should logout successfully', async () => {\r\n      mockSignOut.mockResolvedValue(undefined);\r\n\r\n      await logout();\r\n\r\n      expect(mockSignOut).toHaveBeenCalledWith(auth);\r\n    });\r\n\r\n    it('should handle logout errors', async () => {\r\n      const error = { code: 'auth/network-request-failed' };\r\n      mockSignOut.mockRejectedValue(error);\r\n\r\n      await expect(logout()).rejects.toThrow(\r\n        'Erreur de réseau. Vérifiez votre connexion.'\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('resetPassword', () => {\r\n    it('should send password reset email successfully', async () => {\r\n      const email = 'test@example.com';\r\n      mockSendPasswordResetEmail.mockResolvedValue(undefined);\r\n\r\n      await resetPassword(email);\r\n\r\n      expect(mockSendPasswordResetEmail).toHaveBeenCalledWith(auth, email);\r\n    });\r\n\r\n    it('should handle password reset errors', async () => {\r\n      const email = 'nonexistent@example.com';\r\n      const error = { code: 'auth/user-not-found' };\r\n      mockSendPasswordResetEmail.mockRejectedValue(error);\r\n\r\n      await expect(resetPassword(email)).rejects.toThrow(\r\n        'Aucun utilisateur trouvé avec cet email.'\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('updateUserProfile', () => {\r\n    it('should update user profile successfully', async () => {\r\n      const uid = 'user123';\r\n      const updates = {\r\n        displayName: 'Updated Name',\r\n        photoURL: 'https://example.com/new-photo.jpg',\r\n      };\r\n\r\n      auth.currentUser = {\r\n        uid: 'user123',\r\n        email: 'test@example.com',\r\n      } as any;\r\n\r\n      mockUpdateProfile.mockResolvedValue(undefined);\r\n      mockUpdateDoc.mockResolvedValue(undefined);\r\n\r\n      await updateUserProfile(uid, updates);\r\n\r\n      expect(mockUpdateProfile).toHaveBeenCalledWith(auth.currentUser, updates);\r\n      expect(mockUpdateDoc).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should handle profile update errors', async () => {\r\n      const uid = 'user123';\r\n      const updates = { displayName: 'New Name' };\r\n\r\n      const error = { code: 'auth/network-request-failed' };\r\n      mockUpdateDoc.mockRejectedValue(error);\r\n\r\n      await expect(updateUserProfile(uid, updates)).rejects.toThrow(\r\n        'Erreur de réseau. Vérifiez votre connexion.'\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('getUserData', () => {\r\n    it('should get user data successfully', async () => {\r\n      const uid = 'user123';\r\n      const mockUserData = {\r\n        email: 'test@example.com',\r\n        displayName: 'Test User',\r\n        isAdmin: false,\r\n        createdAt: new Date(),\r\n      };\r\n\r\n      mockGetDoc.mockResolvedValue({\r\n        exists: () => true,\r\n        data: () => mockUserData,\r\n      });\r\n\r\n      const result = await getUserData(uid);\r\n\r\n      expect(result).toEqual({\r\n        uid,\r\n        ...mockUserData,\r\n      });\r\n    });\r\n\r\n    it('should throw error if user does not exist', async () => {\r\n      const uid = 'nonexistent123';\r\n\r\n      mockGetDoc.mockResolvedValue({\r\n        exists: () => false,\r\n      });\r\n\r\n      await expect(getUserData(uid)).rejects.toThrow('Utilisateur non trouvé');\r\n    });\r\n\r\n    it('should handle data retrieval errors', async () => {\r\n      const uid = 'user123';\r\n\r\n      mockGetDoc.mockRejectedValue(new Error('Database error'));\r\n\r\n      await expect(getUserData(uid)).rejects.toThrow(\r\n        'Erreur lors de la récupération des données utilisateur'\r\n      );\r\n    });\r\n  });\r\n});"],"version":3}