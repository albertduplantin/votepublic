{"file":"D:\\Documents\\aiprojets\\votepublic\\src\\__tests__\\integration\\authFlow.test.tsx","mappings":"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","names":[],"sources":["D:\\Documents\\aiprojets\\votepublic\\src\\__tests__\\integration\\authFlow.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { LoginPage } from '../../pages/LoginPage';\r\nimport { RegisterPage } from '../../pages/RegisterPage';\r\nimport { AuthProvider } from '../../contexts/AuthContext';\r\nimport * as authService from '../../services/authService';\r\n\r\n// Mock du service d'authentification\r\njest.mock('../../services/authService');\r\nconst mockAuthService = authService as jest.Mocked<typeof authService>;\r\n\r\n// Mock de react-hot-toast\r\njest.mock('react-hot-toast', () => ({\r\n  success: jest.fn(),\r\n  error: jest.fn(),\r\n}));\r\n\r\n// Mock de react-router-dom\r\nconst mockNavigate = jest.fn();\r\njest.mock('react-router-dom', () => ({\r\n  ...jest.requireActual('react-router-dom'),\r\n  useNavigate: () => mockNavigate,\r\n  useLocation: () => ({ pathname: '/', state: null }),\r\n}));\r\n\r\nconst renderWithProviders = (component: React.ReactElement) => {\r\n  return render(\r\n    <BrowserRouter>\r\n      <AuthProvider>\r\n        {component}\r\n      </AuthProvider>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\ndescribe('Auth Flow Integration', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('Login Flow', () => {\r\n    it('should handle successful login', async () => {\r\n      const mockUser = {\r\n        uid: 'user123',\r\n        email: 'test@example.com',\r\n        displayName: 'Test User',\r\n        isAdmin: false,\r\n        createdAt: new Date(),\r\n      };\r\n\r\n      mockAuthService.loginWithEmail.mockResolvedValue(mockUser);\r\n\r\n      renderWithProviders(<LoginPage />);\r\n\r\n      // Remplir le formulaire\r\n      const emailInput = screen.getByLabelText(/email/i);\r\n      const passwordInput = screen.getByLabelText(/mot de passe/i);\r\n      const submitButton = screen.getByRole('button', { name: /se connecter/i });\r\n\r\n      fireEvent.change(emailInput, { target: { value: 'test@example.com' } });\r\n      fireEvent.change(passwordInput, { target: { value: 'password123' } });\r\n      fireEvent.click(submitButton);\r\n\r\n      // Vérifier que le service est appelé\r\n      await waitFor(() => {\r\n        expect(mockAuthService.loginWithEmail).toHaveBeenCalledWith({\r\n          email: 'test@example.com',\r\n          password: 'password123',\r\n        });\r\n      });\r\n\r\n      // Vérifier la redirection\r\n      await waitFor(() => {\r\n        expect(mockNavigate).toHaveBeenCalledWith('/', { replace: true });\r\n      });\r\n    });\r\n\r\n    it('should handle login errors', async () => {\r\n      const error = new Error('Mot de passe incorrect.');\r\n      mockAuthService.loginWithEmail.mockRejectedValue(error);\r\n\r\n      renderWithProviders(<LoginPage />);\r\n\r\n      // Remplir le formulaire avec des données invalides\r\n      const emailInput = screen.getByLabelText(/email/i);\r\n      const passwordInput = screen.getByLabelText(/mot de passe/i);\r\n      const submitButton = screen.getByRole('button', { name: /se connecter/i });\r\n\r\n      fireEvent.change(emailInput, { target: { value: 'test@example.com' } });\r\n      fireEvent.change(passwordInput, { target: { value: 'wrongpassword' } });\r\n      fireEvent.click(submitButton);\r\n\r\n      // Vérifier que l'erreur est gérée\r\n      await waitFor(() => {\r\n        expect(mockAuthService.loginWithEmail).toHaveBeenCalled();\r\n      });\r\n\r\n      // Vérifier qu'il n'y a pas de redirection\r\n      expect(mockNavigate).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should validate form inputs', async () => {\r\n      renderWithProviders(<LoginPage />);\r\n\r\n      const submitButton = screen.getByRole('button', { name: /se connecter/i });\r\n\r\n      // Essayer de soumettre sans remplir le formulaire\r\n      fireEvent.click(submitButton);\r\n\r\n      // Vérifier que les erreurs de validation s'affichent\r\n      await waitFor(() => {\r\n        expect(screen.getByText(/adresse email invalide/i)).toBeInTheDocument();\r\n      });\r\n\r\n      // Vérifier que le service n'est pas appelé\r\n      expect(mockAuthService.loginWithEmail).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Register Flow', () => {\r\n    it('should handle successful registration', async () => {\r\n      const mockUser = {\r\n        uid: 'newuser123',\r\n        email: 'newuser@example.com',\r\n        displayName: 'newuser',\r\n        isAdmin: false,\r\n        createdAt: new Date(),\r\n      };\r\n\r\n      mockAuthService.registerWithEmail.mockResolvedValue(mockUser);\r\n\r\n      renderWithProviders(<RegisterPage />);\r\n\r\n      // Remplir le formulaire\r\n      const emailInput = screen.getByLabelText(/email/i);\r\n      const passwordInput = screen.getByLabelText(/mot de passe/i);\r\n      const confirmPasswordInput = screen.getByLabelText(/confirmer le mot de passe/i);\r\n      const submitButton = screen.getByRole('button', { name: /s'inscrire/i });\r\n\r\n      fireEvent.change(emailInput, { target: { value: 'newuser@example.com' } });\r\n      fireEvent.change(passwordInput, { target: { value: 'password123' } });\r\n      fireEvent.change(confirmPasswordInput, { target: { value: 'password123' } });\r\n      fireEvent.click(submitButton);\r\n\r\n      // Vérifier que le service est appelé\r\n      await waitFor(() => {\r\n        expect(mockAuthService.registerWithEmail).toHaveBeenCalledWith({\r\n          email: 'newuser@example.com',\r\n          password: 'password123',\r\n          confirmPassword: 'password123',\r\n        });\r\n      });\r\n\r\n      // Vérifier la redirection\r\n      await waitFor(() => {\r\n        expect(mockNavigate).toHaveBeenCalledWith('/', { replace: false });\r\n      });\r\n    });\r\n\r\n    it('should validate password confirmation', async () => {\r\n      renderWithProviders(<RegisterPage />);\r\n\r\n      const emailInput = screen.getByLabelText(/email/i);\r\n      const passwordInput = screen.getByLabelText(/mot de passe/i);\r\n      const confirmPasswordInput = screen.getByLabelText(/confirmer le mot de passe/i);\r\n      const submitButton = screen.getByRole('button', { name: /s'inscrire/i });\r\n\r\n      fireEvent.change(emailInput, { target: { value: 'test@example.com' } });\r\n      fireEvent.change(passwordInput, { target: { value: 'password123' } });\r\n      fireEvent.change(confirmPasswordInput, { target: { value: 'differentpassword' } });\r\n      fireEvent.click(submitButton);\r\n\r\n      // Vérifier que l'erreur de confirmation s'affiche\r\n      await waitFor(() => {\r\n        expect(screen.getByText(/les mots de passe ne correspondent pas/i)).toBeInTheDocument();\r\n      });\r\n\r\n      // Vérifier que le service n'est pas appelé\r\n      expect(mockAuthService.registerWithEmail).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should validate password strength', async () => {\r\n      renderWithProviders(<RegisterPage />);\r\n\r\n      const emailInput = screen.getByLabelText(/email/i);\r\n      const passwordInput = screen.getByLabelText(/mot de passe/i);\r\n      const confirmPasswordInput = screen.getByLabelText(/confirmer le mot de passe/i);\r\n      const submitButton = screen.getByRole('button', { name: /s'inscrire/i });\r\n\r\n      fireEvent.change(emailInput, { target: { value: 'test@example.com' } });\r\n      fireEvent.change(passwordInput, { target: { value: '123' } }); // Mot de passe trop court\r\n      fireEvent.change(confirmPasswordInput, { target: { value: '123' } });\r\n      fireEvent.click(submitButton);\r\n\r\n      // Vérifier que l'erreur de mot de passe s'affiche\r\n      await waitFor(() => {\r\n        expect(screen.getByText(/le mot de passe doit contenir au moins 6 caractères/i)).toBeInTheDocument();\r\n      });\r\n\r\n      // Vérifier que le service n'est pas appelé\r\n      expect(mockAuthService.registerWithEmail).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Google Auth Flow', () => {\r\n    it('should handle Google login', async () => {\r\n      const mockUser = {\r\n        uid: 'googleuser123',\r\n        email: 'google@example.com',\r\n        displayName: 'Google User',\r\n        photoURL: 'https://example.com/photo.jpg',\r\n        isAdmin: false,\r\n        createdAt: new Date(),\r\n      };\r\n\r\n      mockAuthService.loginWithGoogle.mockResolvedValue(mockUser);\r\n\r\n      renderWithProviders(<LoginPage />);\r\n\r\n      const googleButton = screen.getByRole('button', { name: /continuer avec google/i });\r\n      fireEvent.click(googleButton);\r\n\r\n      // Vérifier que le service est appelé\r\n      await waitFor(() => {\r\n        expect(mockAuthService.loginWithGoogle).toHaveBeenCalled();\r\n      });\r\n\r\n      // Vérifier la redirection\r\n      await waitFor(() => {\r\n        expect(mockNavigate).toHaveBeenCalledWith('/', { replace: true });\r\n      });\r\n    });\r\n\r\n    it('should handle Google login errors', async () => {\r\n      const error = new Error('Fenêtre de connexion fermée.');\r\n      mockAuthService.loginWithGoogle.mockRejectedValue(error);\r\n\r\n      renderWithProviders(<LoginPage />);\r\n\r\n      const googleButton = screen.getByRole('button', { name: /continuer avec google/i });\r\n      fireEvent.click(googleButton);\r\n\r\n      // Vérifier que l'erreur est gérée\r\n      await waitFor(() => {\r\n        expect(mockAuthService.loginWithGoogle).toHaveBeenCalled();\r\n      });\r\n\r\n      // Vérifier qu'il n'y a pas de redirection\r\n      expect(mockNavigate).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Form Validation', () => {\r\n    it('should validate email format', async () => {\r\n      renderWithProviders(<LoginPage />);\r\n\r\n      const emailInput = screen.getByLabelText(/email/i);\r\n      const submitButton = screen.getByRole('button', { name: /se connecter/i });\r\n\r\n      // Email invalide\r\n      fireEvent.change(emailInput, { target: { value: 'invalid-email' } });\r\n      fireEvent.click(submitButton);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText(/adresse email invalide/i)).toBeInTheDocument();\r\n      });\r\n\r\n      // Email valide\r\n      fireEvent.change(emailInput, { target: { value: 'valid@email.com' } });\r\n      fireEvent.click(submitButton);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.queryByText(/adresse email invalide/i)).not.toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    it('should show/hide password', async () => {\r\n      renderWithProviders(<LoginPage />);\r\n\r\n      const passwordInput = screen.getByLabelText(/mot de passe/i);\r\n      const toggleButton = screen.getByRole('button', { name: /toggle password visibility/i });\r\n\r\n      // Par défaut, le mot de passe est masqué\r\n      expect(passwordInput).toHaveAttribute('type', 'password');\r\n\r\n      // Afficher le mot de passe\r\n      fireEvent.click(toggleButton);\r\n      expect(passwordInput).toHaveAttribute('type', 'text');\r\n\r\n      // Masquer le mot de passe\r\n      fireEvent.click(toggleButton);\r\n      expect(passwordInput).toHaveAttribute('type', 'password');\r\n    });\r\n  });\r\n\r\n  describe('Navigation', () => {\r\n    it('should navigate between login and register pages', () => {\r\n      renderWithProviders(<LoginPage />);\r\n\r\n      const registerLink = screen.getByText(/pas encore de compte/i);\r\n      fireEvent.click(registerLink);\r\n\r\n      // Vérifier la navigation\r\n      expect(mockNavigate).toHaveBeenCalledWith('/register');\r\n    });\r\n\r\n    it('should navigate back to home from register', () => {\r\n      renderWithProviders(<RegisterPage />);\r\n\r\n      const backLink = screen.getByText(/retour à l'accueil/i);\r\n      fireEvent.click(backLink);\r\n\r\n      // Vérifier la navigation\r\n      expect(mockNavigate).toHaveBeenCalledWith('/');\r\n    });\r\n  });\r\n\r\n  describe('Loading States', () => {\r\n    it('should show loading state during login', async () => {\r\n      // Simuler un délai dans le service\r\n      mockAuthService.loginWithEmail.mockImplementation(\r\n        () => new Promise(resolve => setTimeout(() => resolve({} as any), 100))\r\n      );\r\n\r\n      renderWithProviders(<LoginPage />);\r\n\r\n      const emailInput = screen.getByLabelText(/email/i);\r\n      const passwordInput = screen.getByLabelText(/mot de passe/i);\r\n      const submitButton = screen.getByRole('button', { name: /se connecter/i });\r\n\r\n      fireEvent.change(emailInput, { target: { value: 'test@example.com' } });\r\n      fireEvent.change(passwordInput, { target: { value: 'password123' } });\r\n      fireEvent.click(submitButton);\r\n\r\n      // Vérifier que le bouton est désactivé pendant le chargement\r\n      expect(submitButton).toBeDisabled();\r\n\r\n      // Attendre que le chargement soit terminé\r\n      await waitFor(() => {\r\n        expect(submitButton).not.toBeDisabled();\r\n      });\r\n    });\r\n  });\r\n});"],"version":3}