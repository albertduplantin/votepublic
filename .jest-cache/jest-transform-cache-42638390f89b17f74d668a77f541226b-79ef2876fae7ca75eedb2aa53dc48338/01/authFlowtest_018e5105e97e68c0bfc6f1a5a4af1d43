6534d85c75ec72e15e229bbb8293a438
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock du service d'authentification
jest.mock('../../services/authService');
// Mock de react-hot-toast
jest.mock('react-hot-toast', () => ({
    success: jest.fn(),
    error: jest.fn(),
}));
jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    useNavigate: () => mockNavigate,
    useLocation: () => ({ pathname: '/', state: null }),
}));
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const react_router_dom_1 = require("react-router-dom");
const LoginPage_1 = require("../../pages/LoginPage");
const RegisterPage_1 = require("../../pages/RegisterPage");
const AuthContext_1 = require("../../contexts/AuthContext");
const authService = __importStar(require("../../services/authService"));
const mockAuthService = authService;
// Mock de react-router-dom
const mockNavigate = jest.fn();
const renderWithProviders = (component) => {
    return (0, react_2.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(AuthContext_1.AuthProvider, { children: component }) }));
};
describe('Auth Flow Integration', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('Login Flow', () => {
        it('should handle successful login', async () => {
            const mockUser = {
                uid: 'user123',
                email: 'test@example.com',
                displayName: 'Test User',
                isAdmin: false,
                createdAt: new Date(),
            };
            mockAuthService.loginWithEmail.mockResolvedValue(mockUser);
            renderWithProviders((0, jsx_runtime_1.jsx)(LoginPage_1.LoginPage, {}));
            // Remplir le formulaire
            const emailInput = react_2.screen.getByLabelText(/email/i);
            const passwordInput = react_2.screen.getByLabelText(/mot de passe/i);
            const submitButton = react_2.screen.getByRole('button', { name: /se connecter/i });
            react_2.fireEvent.change(emailInput, { target: { value: 'test@example.com' } });
            react_2.fireEvent.change(passwordInput, { target: { value: 'password123' } });
            react_2.fireEvent.click(submitButton);
            // Vérifier que le service est appelé
            await (0, react_2.waitFor)(() => {
                expect(mockAuthService.loginWithEmail).toHaveBeenCalledWith({
                    email: 'test@example.com',
                    password: 'password123',
                });
            });
            // Vérifier la redirection
            await (0, react_2.waitFor)(() => {
                expect(mockNavigate).toHaveBeenCalledWith('/', { replace: true });
            });
        });
        it('should handle login errors', async () => {
            const error = new Error('Mot de passe incorrect.');
            mockAuthService.loginWithEmail.mockRejectedValue(error);
            renderWithProviders((0, jsx_runtime_1.jsx)(LoginPage_1.LoginPage, {}));
            // Remplir le formulaire avec des données invalides
            const emailInput = react_2.screen.getByLabelText(/email/i);
            const passwordInput = react_2.screen.getByLabelText(/mot de passe/i);
            const submitButton = react_2.screen.getByRole('button', { name: /se connecter/i });
            react_2.fireEvent.change(emailInput, { target: { value: 'test@example.com' } });
            react_2.fireEvent.change(passwordInput, { target: { value: 'wrongpassword' } });
            react_2.fireEvent.click(submitButton);
            // Vérifier que l'erreur est gérée
            await (0, react_2.waitFor)(() => {
                expect(mockAuthService.loginWithEmail).toHaveBeenCalled();
            });
            // Vérifier qu'il n'y a pas de redirection
            expect(mockNavigate).not.toHaveBeenCalled();
        });
        it('should validate form inputs', async () => {
            renderWithProviders((0, jsx_runtime_1.jsx)(LoginPage_1.LoginPage, {}));
            const submitButton = react_2.screen.getByRole('button', { name: /se connecter/i });
            // Essayer de soumettre sans remplir le formulaire
            react_2.fireEvent.click(submitButton);
            // Vérifier que les erreurs de validation s'affichent
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByText(/adresse email invalide/i)).toBeInTheDocument();
            });
            // Vérifier que le service n'est pas appelé
            expect(mockAuthService.loginWithEmail).not.toHaveBeenCalled();
        });
    });
    describe('Register Flow', () => {
        it('should handle successful registration', async () => {
            const mockUser = {
                uid: 'newuser123',
                email: 'newuser@example.com',
                displayName: 'newuser',
                isAdmin: false,
                createdAt: new Date(),
            };
            mockAuthService.registerWithEmail.mockResolvedValue(mockUser);
            renderWithProviders((0, jsx_runtime_1.jsx)(RegisterPage_1.RegisterPage, {}));
            // Remplir le formulaire
            const emailInput = react_2.screen.getByLabelText(/email/i);
            const passwordInput = react_2.screen.getByLabelText(/mot de passe/i);
            const confirmPasswordInput = react_2.screen.getByLabelText(/confirmer le mot de passe/i);
            const submitButton = react_2.screen.getByRole('button', { name: /s'inscrire/i });
            react_2.fireEvent.change(emailInput, { target: { value: 'newuser@example.com' } });
            react_2.fireEvent.change(passwordInput, { target: { value: 'password123' } });
            react_2.fireEvent.change(confirmPasswordInput, { target: { value: 'password123' } });
            react_2.fireEvent.click(submitButton);
            // Vérifier que le service est appelé
            await (0, react_2.waitFor)(() => {
                expect(mockAuthService.registerWithEmail).toHaveBeenCalledWith({
                    email: 'newuser@example.com',
                    password: 'password123',
                    confirmPassword: 'password123',
                });
            });
            // Vérifier la redirection
            await (0, react_2.waitFor)(() => {
                expect(mockNavigate).toHaveBeenCalledWith('/', { replace: false });
            });
        });
        it('should validate password confirmation', async () => {
            renderWithProviders((0, jsx_runtime_1.jsx)(RegisterPage_1.RegisterPage, {}));
            const emailInput = react_2.screen.getByLabelText(/email/i);
            const passwordInput = react_2.screen.getByLabelText(/mot de passe/i);
            const confirmPasswordInput = react_2.screen.getByLabelText(/confirmer le mot de passe/i);
            const submitButton = react_2.screen.getByRole('button', { name: /s'inscrire/i });
            react_2.fireEvent.change(emailInput, { target: { value: 'test@example.com' } });
            react_2.fireEvent.change(passwordInput, { target: { value: 'password123' } });
            react_2.fireEvent.change(confirmPasswordInput, { target: { value: 'differentpassword' } });
            react_2.fireEvent.click(submitButton);
            // Vérifier que l'erreur de confirmation s'affiche
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByText(/les mots de passe ne correspondent pas/i)).toBeInTheDocument();
            });
            // Vérifier que le service n'est pas appelé
            expect(mockAuthService.registerWithEmail).not.toHaveBeenCalled();
        });
        it('should validate password strength', async () => {
            renderWithProviders((0, jsx_runtime_1.jsx)(RegisterPage_1.RegisterPage, {}));
            const emailInput = react_2.screen.getByLabelText(/email/i);
            const passwordInput = react_2.screen.getByLabelText(/mot de passe/i);
            const confirmPasswordInput = react_2.screen.getByLabelText(/confirmer le mot de passe/i);
            const submitButton = react_2.screen.getByRole('button', { name: /s'inscrire/i });
            react_2.fireEvent.change(emailInput, { target: { value: 'test@example.com' } });
            react_2.fireEvent.change(passwordInput, { target: { value: '123' } }); // Mot de passe trop court
            react_2.fireEvent.change(confirmPasswordInput, { target: { value: '123' } });
            react_2.fireEvent.click(submitButton);
            // Vérifier que l'erreur de mot de passe s'affiche
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByText(/le mot de passe doit contenir au moins 6 caractères/i)).toBeInTheDocument();
            });
            // Vérifier que le service n'est pas appelé
            expect(mockAuthService.registerWithEmail).not.toHaveBeenCalled();
        });
    });
    describe('Google Auth Flow', () => {
        it('should handle Google login', async () => {
            const mockUser = {
                uid: 'googleuser123',
                email: 'google@example.com',
                displayName: 'Google User',
                photoURL: 'https://example.com/photo.jpg',
                isAdmin: false,
                createdAt: new Date(),
            };
            mockAuthService.loginWithGoogle.mockResolvedValue(mockUser);
            renderWithProviders((0, jsx_runtime_1.jsx)(LoginPage_1.LoginPage, {}));
            const googleButton = react_2.screen.getByRole('button', { name: /continuer avec google/i });
            react_2.fireEvent.click(googleButton);
            // Vérifier que le service est appelé
            await (0, react_2.waitFor)(() => {
                expect(mockAuthService.loginWithGoogle).toHaveBeenCalled();
            });
            // Vérifier la redirection
            await (0, react_2.waitFor)(() => {
                expect(mockNavigate).toHaveBeenCalledWith('/', { replace: true });
            });
        });
        it('should handle Google login errors', async () => {
            const error = new Error('Fenêtre de connexion fermée.');
            mockAuthService.loginWithGoogle.mockRejectedValue(error);
            renderWithProviders((0, jsx_runtime_1.jsx)(LoginPage_1.LoginPage, {}));
            const googleButton = react_2.screen.getByRole('button', { name: /continuer avec google/i });
            react_2.fireEvent.click(googleButton);
            // Vérifier que l'erreur est gérée
            await (0, react_2.waitFor)(() => {
                expect(mockAuthService.loginWithGoogle).toHaveBeenCalled();
            });
            // Vérifier qu'il n'y a pas de redirection
            expect(mockNavigate).not.toHaveBeenCalled();
        });
    });
    describe('Form Validation', () => {
        it('should validate email format', async () => {
            renderWithProviders((0, jsx_runtime_1.jsx)(LoginPage_1.LoginPage, {}));
            const emailInput = react_2.screen.getByLabelText(/email/i);
            const submitButton = react_2.screen.getByRole('button', { name: /se connecter/i });
            // Email invalide
            react_2.fireEvent.change(emailInput, { target: { value: 'invalid-email' } });
            react_2.fireEvent.click(submitButton);
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByText(/adresse email invalide/i)).toBeInTheDocument();
            });
            // Email valide
            react_2.fireEvent.change(emailInput, { target: { value: 'valid@email.com' } });
            react_2.fireEvent.click(submitButton);
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.queryByText(/adresse email invalide/i)).not.toBeInTheDocument();
            });
        });
        it('should show/hide password', async () => {
            renderWithProviders((0, jsx_runtime_1.jsx)(LoginPage_1.LoginPage, {}));
            const passwordInput = react_2.screen.getByLabelText(/mot de passe/i);
            const toggleButton = react_2.screen.getByRole('button', { name: /toggle password visibility/i });
            // Par défaut, le mot de passe est masqué
            expect(passwordInput).toHaveAttribute('type', 'password');
            // Afficher le mot de passe
            react_2.fireEvent.click(toggleButton);
            expect(passwordInput).toHaveAttribute('type', 'text');
            // Masquer le mot de passe
            react_2.fireEvent.click(toggleButton);
            expect(passwordInput).toHaveAttribute('type', 'password');
        });
    });
    describe('Navigation', () => {
        it('should navigate between login and register pages', () => {
            renderWithProviders((0, jsx_runtime_1.jsx)(LoginPage_1.LoginPage, {}));
            const registerLink = react_2.screen.getByText(/pas encore de compte/i);
            react_2.fireEvent.click(registerLink);
            // Vérifier la navigation
            expect(mockNavigate).toHaveBeenCalledWith('/register');
        });
        it('should navigate back to home from register', () => {
            renderWithProviders((0, jsx_runtime_1.jsx)(RegisterPage_1.RegisterPage, {}));
            const backLink = react_2.screen.getByText(/retour à l'accueil/i);
            react_2.fireEvent.click(backLink);
            // Vérifier la navigation
            expect(mockNavigate).toHaveBeenCalledWith('/');
        });
    });
    describe('Loading States', () => {
        it('should show loading state during login', async () => {
            // Simuler un délai dans le service
            mockAuthService.loginWithEmail.mockImplementation(() => new Promise(resolve => setTimeout(() => resolve({}), 100)));
            renderWithProviders((0, jsx_runtime_1.jsx)(LoginPage_1.LoginPage, {}));
            const emailInput = react_2.screen.getByLabelText(/email/i);
            const passwordInput = react_2.screen.getByLabelText(/mot de passe/i);
            const submitButton = react_2.screen.getByRole('button', { name: /se connecter/i });
            react_2.fireEvent.change(emailInput, { target: { value: 'test@example.com' } });
            react_2.fireEvent.change(passwordInput, { target: { value: 'password123' } });
            react_2.fireEvent.click(submitButton);
            // Vérifier que le bouton est désactivé pendant le chargement
            expect(submitButton).toBeDisabled();
            // Attendre que le chargement soit terminé
            await (0, react_2.waitFor)(() => {
                expect(submitButton).not.toBeDisabled();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,