33f2fc7e4caf3773d551c74b8fa71d15
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock de Firebase
jest.mock('./services/firebase', () => ({
    auth: {
        currentUser: null,
        onAuthStateChanged: jest.fn(),
    },
    db: {
        collection: jest.fn(),
        doc: jest.fn(),
    },
    storage: {
        ref: jest.fn(),
    },
}));
// Mock de react-hot-toast
jest.mock('react-hot-toast', () => ({
    __esModule: true,
    default: {
        success: jest.fn(),
        error: jest.fn(),
        loading: jest.fn(),
    },
    toast: {
        success: jest.fn(),
        error: jest.fn(),
        loading: jest.fn(),
    },
}));
// Mock de react-router-dom
jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    useNavigate: () => jest.fn(),
    useLocation: () => ({ pathname: '/', state: null }),
    useParams: () => ({}),
}));
require("@testing-library/jest-dom");
// Configuration globale pour les tests
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation(query => ({
        matches: false,
        media: query,
        onchange: null,
        addListener: jest.fn(), // deprecated
        removeListener: jest.fn(), // deprecated
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
        dispatchEvent: jest.fn(),
    })),
});
// Mock de localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
};
global.localStorage = localStorageMock;
// Mock de sessionStorage
const sessionStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
};
global.sessionStorage = sessionStorageMock;
// Mock de fetch
global.fetch = jest.fn();
// Mock de console pour éviter le bruit dans les tests
const originalError = console.error;
const originalWarn = console.warn;
beforeAll(() => {
    console.error = (...args) => {
        if (typeof args[0] === 'string' &&
            args[0].includes('Warning: ReactDOM.render is no longer supported')) {
            return;
        }
        originalError.call(console, ...args);
    };
    console.warn = (...args) => {
        if (typeof args[0] === 'string' &&
            args[0].includes('componentWillReceiveProps has been renamed')) {
            return;
        }
        originalWarn.call(console, ...args);
    };
});
afterAll(() => {
    console.error = originalError;
    console.warn = originalWarn;
});
// Nettoyage après chaque test
afterEach(() => {
    jest.clearAllMocks();
    localStorageMock.clear();
    sessionStorageMock.clear();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXERvY3VtZW50c1xcYWlwcm9qZXRzXFx2b3RlcHVibGljXFxzcmNcXHNldHVwVGVzdHMudHMiLCJtYXBwaW5ncyI6Ijs7QUFFQSxtQkFBbUI7QUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLElBQUksRUFBRTtRQUNKLFdBQVcsRUFBRSxJQUFJO1FBQ2pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7S0FDOUI7SUFDRCxFQUFFLEVBQUU7UUFDRixVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNyQixHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUNmO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7S0FDZjtDQUNGLENBQUMsQ0FBQyxDQUFDO0FBRUosMEJBQTBCO0FBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNsQyxVQUFVLEVBQUUsSUFBSTtJQUNoQixPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNsQixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNoQixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUNuQjtJQUNELEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2xCLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2hCLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0tBQ25CO0NBQ0YsQ0FBQyxDQUFDLENBQUM7QUFFSiwyQkFBMkI7QUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ25DLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQztJQUN6QyxXQUFXLEVBQUUsR0FBRyxF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Q0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLEdBQUcsRUFBRTtJQUNaLE9BQU8sQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDO0lBQzlCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDO0FBQzlCLENBQUMsQ0FBQyxDQUFDO0FBRUgsOEJBQThCO0FBQzlCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7SUFDYixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDckIsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDekIsa0JBQWtCLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDN0IsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRDpcXERvY3VtZW50c1xcYWlwcm9qZXRzXFx2b3RlcHVibGljXFxzcmNcXHNldHVwVGVzdHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJztcclxuXHJcbi8vIE1vY2sgZGUgRmlyZWJhc2VcclxuamVzdC5tb2NrKCcuL3NlcnZpY2VzL2ZpcmViYXNlJywgKCkgPT4gKHtcclxuICBhdXRoOiB7XHJcbiAgICBjdXJyZW50VXNlcjogbnVsbCxcclxuICAgIG9uQXV0aFN0YXRlQ2hhbmdlZDogamVzdC5mbigpLFxyXG4gIH0sXHJcbiAgZGI6IHtcclxuICAgIGNvbGxlY3Rpb246IGplc3QuZm4oKSxcclxuICAgIGRvYzogamVzdC5mbigpLFxyXG4gIH0sXHJcbiAgc3RvcmFnZToge1xyXG4gICAgcmVmOiBqZXN0LmZuKCksXHJcbiAgfSxcclxufSkpO1xyXG5cclxuLy8gTW9jayBkZSByZWFjdC1ob3QtdG9hc3RcclxuamVzdC5tb2NrKCdyZWFjdC1ob3QtdG9hc3QnLCAoKSA9PiAoe1xyXG4gIF9fZXNNb2R1bGU6IHRydWUsXHJcbiAgZGVmYXVsdDoge1xyXG4gICAgc3VjY2VzczogamVzdC5mbigpLFxyXG4gICAgZXJyb3I6IGplc3QuZm4oKSxcclxuICAgIGxvYWRpbmc6IGplc3QuZm4oKSxcclxuICB9LFxyXG4gIHRvYXN0OiB7XHJcbiAgICBzdWNjZXNzOiBqZXN0LmZuKCksXHJcbiAgICBlcnJvcjogamVzdC5mbigpLFxyXG4gICAgbG9hZGluZzogamVzdC5mbigpLFxyXG4gIH0sXHJcbn0pKTtcclxuXHJcbi8vIE1vY2sgZGUgcmVhY3Qtcm91dGVyLWRvbVxyXG5qZXN0Lm1vY2soJ3JlYWN0LXJvdXRlci1kb20nLCAoKSA9PiAoe1xyXG4gIC4uLmplc3QucmVxdWlyZUFjdHVhbCgncmVhY3Qtcm91dGVyLWRvbScpLFxyXG4gIHVzZU5hdmlnYXRlOiAoKSA9PiBqZXN0LmZuKCksXHJcbiAgdXNlTG9jYXRpb246ICgpID0+ICh7IHBhdGhuYW1lOiAnLycsIHN0YXRlOiBudWxsIH0pLFxyXG4gIHVzZVBhcmFtczogKCkgPT4gKHt9KSxcclxufSkpO1xyXG5cclxuLy8gQ29uZmlndXJhdGlvbiBnbG9iYWxlIHBvdXIgbGVzIHRlc3RzXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdtYXRjaE1lZGlhJywge1xyXG4gIHdyaXRhYmxlOiB0cnVlLFxyXG4gIHZhbHVlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKHF1ZXJ5ID0+ICh7XHJcbiAgICBtYXRjaGVzOiBmYWxzZSxcclxuICAgIG1lZGlhOiBxdWVyeSxcclxuICAgIG9uY2hhbmdlOiBudWxsLFxyXG4gICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSwgLy8gZGVwcmVjYXRlZFxyXG4gICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSwgLy8gZGVwcmVjYXRlZFxyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gICAgZGlzcGF0Y2hFdmVudDogamVzdC5mbigpLFxyXG4gIH0pKSxcclxufSk7XHJcblxyXG4vLyBNb2NrIGRlIGxvY2FsU3RvcmFnZVxyXG5jb25zdCBsb2NhbFN0b3JhZ2VNb2NrID0ge1xyXG4gIGdldEl0ZW06IGplc3QuZm4oKSxcclxuICBzZXRJdGVtOiBqZXN0LmZuKCksXHJcbiAgcmVtb3ZlSXRlbTogamVzdC5mbigpLFxyXG4gIGNsZWFyOiBqZXN0LmZuKCksXHJcbn07XHJcbmdsb2JhbC5sb2NhbFN0b3JhZ2UgPSBsb2NhbFN0b3JhZ2VNb2NrO1xyXG5cclxuLy8gTW9jayBkZSBzZXNzaW9uU3RvcmFnZVxyXG5jb25zdCBzZXNzaW9uU3RvcmFnZU1vY2sgPSB7XHJcbiAgZ2V0SXRlbTogamVzdC5mbigpLFxyXG4gIHNldEl0ZW06IGplc3QuZm4oKSxcclxuICByZW1vdmVJdGVtOiBqZXN0LmZuKCksXHJcbiAgY2xlYXI6IGplc3QuZm4oKSxcclxufTtcclxuZ2xvYmFsLnNlc3Npb25TdG9yYWdlID0gc2Vzc2lvblN0b3JhZ2VNb2NrO1xyXG5cclxuLy8gTW9jayBkZSBmZXRjaFxyXG5nbG9iYWwuZmV0Y2ggPSBqZXN0LmZuKCk7XHJcblxyXG4vLyBNb2NrIGRlIGNvbnNvbGUgcG91ciDDqXZpdGVyIGxlIGJydWl0IGRhbnMgbGVzIHRlc3RzXHJcbmNvbnN0IG9yaWdpbmFsRXJyb3IgPSBjb25zb2xlLmVycm9yO1xyXG5jb25zdCBvcmlnaW5hbFdhcm4gPSBjb25zb2xlLndhcm47XHJcblxyXG5iZWZvcmVBbGwoKCkgPT4ge1xyXG4gIGNvbnNvbGUuZXJyb3IgPSAoLi4uYXJnczogYW55W10pID0+IHtcclxuICAgIGlmIChcclxuICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXHJcbiAgICAgIGFyZ3NbMF0uaW5jbHVkZXMoJ1dhcm5pbmc6IFJlYWN0RE9NLnJlbmRlciBpcyBubyBsb25nZXIgc3VwcG9ydGVkJylcclxuICAgICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBvcmlnaW5hbEVycm9yLmNhbGwoY29uc29sZSwgLi4uYXJncyk7XHJcbiAgfTtcclxuICBcclxuICBjb25zb2xlLndhcm4gPSAoLi4uYXJnczogYW55W10pID0+IHtcclxuICAgIGlmIChcclxuICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXHJcbiAgICAgIGFyZ3NbMF0uaW5jbHVkZXMoJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgaGFzIGJlZW4gcmVuYW1lZCcpXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgb3JpZ2luYWxXYXJuLmNhbGwoY29uc29sZSwgLi4uYXJncyk7XHJcbiAgfTtcclxufSk7XHJcblxyXG5hZnRlckFsbCgoKSA9PiB7XHJcbiAgY29uc29sZS5lcnJvciA9IG9yaWdpbmFsRXJyb3I7XHJcbiAgY29uc29sZS53YXJuID0gb3JpZ2luYWxXYXJuO1xyXG59KTtcclxuXHJcbi8vIE5ldHRveWFnZSBhcHLDqHMgY2hhcXVlIHRlc3RcclxuYWZ0ZXJFYWNoKCgpID0+IHtcclxuICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcclxuICBsb2NhbFN0b3JhZ2VNb2NrLmNsZWFyKCk7XHJcbiAgc2Vzc2lvblN0b3JhZ2VNb2NrLmNsZWFyKCk7XHJcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==