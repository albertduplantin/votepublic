0632b7e4d7479bef581c82f4f071f8b4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cn = exports.retry = exports.debounce = exports.removeLocalStorage = exports.getLocalStorage = exports.setLocalStorage = exports.getIpAddress = exports.getUserAgent = exports.generateRatingDistribution = exports.calculateAverageRating = exports.formatRating = exports.formatDate = exports.resizeImage = exports.isValidImageFile = exports.isValidPassword = exports.isValidEmail = exports.generateSessionId = exports.generateId = void 0;
const constants_1 = require("./constants");
/**
 * Génère un ID unique
 */
const generateId = () => {
    return Date.now().toString(36) + Math.random().toString(36).substring(2);
};
exports.generateId = generateId;
/**
 * Génère un ID de session unique pour les votes anonymes
 */
const generateSessionId = () => {
    const timestamp = Date.now();
    const random = Math.random().toString(36).substring(2);
    return `${timestamp}-${random}`;
};
exports.generateSessionId = generateSessionId;
/**
 * Valide une adresse email
 */
const isValidEmail = (email) => {
    return constants_1.VALIDATION_RULES.EMAIL.test(email);
};
exports.isValidEmail = isValidEmail;
/**
 * Valide un mot de passe
 */
const isValidPassword = (password) => {
    return password.length >= constants_1.VALIDATION_RULES.PASSWORD_MIN_LENGTH;
};
exports.isValidPassword = isValidPassword;
/**
 * Valide un fichier image
 */
const isValidImageFile = (file) => {
    return (constants_1.VALIDATION_RULES.ALLOWED_IMAGE_TYPES.indexOf(file.type) !== -1 &&
        file.size <= constants_1.VALIDATION_RULES.MAX_FILE_SIZE);
};
exports.isValidImageFile = isValidImageFile;
/**
 * Redimensionne une image
 */
const resizeImage = (file, maxWidth = 800, maxHeight = 600, quality = 0.8) => {
    return new Promise((resolve, reject) => {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        const img = new Image();
        img.onload = () => {
            // Calculer les nouvelles dimensions
            let { width, height } = img;
            if (width > maxWidth) {
                height = (height * maxWidth) / width;
                width = maxWidth;
            }
            if (height > maxHeight) {
                width = (width * maxHeight) / height;
                height = maxHeight;
            }
            canvas.width = width;
            canvas.height = height;
            if (ctx) {
                ctx.drawImage(img, 0, 0, width, height);
                canvas.toBlob((blob) => {
                    if (blob) {
                        resolve(blob);
                    }
                    else {
                        reject(new Error('Erreur lors du redimensionnement'));
                    }
                }, 'image/jpeg', quality);
            }
            else {
                reject(new Error('Impossible de créer le contexte canvas'));
            }
        };
        img.onerror = () => reject(new Error('Erreur lors du chargement de l\'image'));
        img.src = URL.createObjectURL(file);
    });
};
exports.resizeImage = resizeImage;
/**
 * Formate une date
 */
const formatDate = (date) => {
    return new Intl.DateTimeFormat('fr-FR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
    }).format(date);
};
exports.formatDate = formatDate;
/**
 * Formate une note avec étoiles
 */
const formatRating = (rating) => {
    return `${rating}/5`;
};
exports.formatRating = formatRating;
/**
 * Calcule la moyenne des notes
 */
const calculateAverageRating = (ratings) => {
    if (ratings.length === 0)
        return 0;
    const sum = ratings.reduce((acc, rating) => acc + rating, 0);
    return Math.round((sum / ratings.length) * 10) / 10;
};
exports.calculateAverageRating = calculateAverageRating;
/**
 * Génère une distribution des notes
 */
const generateRatingDistribution = (ratings) => {
    const distribution = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };
    ratings.forEach(rating => {
        if (rating >= 1 && rating <= 5) {
            distribution[rating]++;
        }
    });
    return distribution;
};
exports.generateRatingDistribution = generateRatingDistribution;
/**
 * Retourne l'User Agent du navigateur
 */
const getUserAgent = () => {
    return navigator.userAgent;
};
exports.getUserAgent = getUserAgent;
/**
 * Retourne l'adresse IP (approximative via service externe)
 */
const getIpAddress = async () => {
    try {
        const response = await fetch('https://api.ipify.org?format=json');
        const data = await response.json();
        return data.ip;
    }
    catch (error) {
        console.warn('Impossible de récupérer l\'IP:', error);
        return null;
    }
};
exports.getIpAddress = getIpAddress;
/**
 * Stocke une valeur dans le localStorage
 */
const setLocalStorage = (key, value) => {
    try {
        localStorage.setItem(key, JSON.stringify(value));
    }
    catch (error) {
        console.warn('Erreur lors du stockage local:', error);
    }
};
exports.setLocalStorage = setLocalStorage;
/**
 * Récupère une valeur du localStorage
 */
const getLocalStorage = (key, defaultValue) => {
    try {
        const item = localStorage.getItem(key);
        return item ? JSON.parse(item) : defaultValue;
    }
    catch (error) {
        console.warn('Erreur lors de la récupération locale:', error);
        return defaultValue;
    }
};
exports.getLocalStorage = getLocalStorage;
/**
 * Supprime une valeur du localStorage
 */
const removeLocalStorage = (key) => {
    try {
        localStorage.removeItem(key);
    }
    catch (error) {
        console.warn('Erreur lors de la suppression locale:', error);
    }
};
exports.removeLocalStorage = removeLocalStorage;
/**
 * Débounce une fonction
 */
const debounce = (func, wait) => {
    let timeout;
    return (...args) => {
        clearTimeout(timeout);
        timeout = window.setTimeout(() => func(...args), wait);
    };
};
exports.debounce = debounce;
/**
 * Retry une fonction avec délai
 */
const retry = async (fn, maxRetries = 3, delay = 1000) => {
    let lastError = new Error('Une erreur est survenue');
    for (let i = 0; i < maxRetries; i++) {
        try {
            return await fn();
        }
        catch (error) {
            lastError = error;
            if (i < maxRetries - 1) {
                await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, i)));
            }
        }
    }
    throw new Error(lastError.message || 'Une erreur est survenue');
};
exports.retry = retry;
/**
 * Combine les classes CSS
 */
const cn = (...classes) => {
    return classes.filter(Boolean).join(' ');
};
exports.cn = cn;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,