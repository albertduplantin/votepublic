406d2c919103fef8a6334fcb3d48a600
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAuth = exports.AuthProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const authService_1 = require("../services/authService");
const AuthContext = (0, react_1.createContext)(undefined);
const AuthProvider = ({ children }) => {
    const [state, setState] = (0, react_1.useState)({
        user: null,
        loading: true,
        error: null,
    });
    (0, react_1.useEffect)(() => {
        // Écouter les changements d'état d'authentification
        const unsubscribe = (0, authService_1.onAuthStateChange)((user) => {
            setState({
                user,
                loading: false,
                error: null,
            });
        });
        return () => unsubscribe();
    }, []);
    const login = async (data) => {
        try {
            setState(prev => ({ ...prev, loading: true, error: null }));
            const user = await (0, authService_1.loginWithEmail)(data);
            setState(prev => ({ ...prev, user, loading: false }));
        }
        catch (error) {
            setState(prev => ({
                ...prev,
                loading: false,
                error: error.message
            }));
            throw error;
        }
    };
    const register = async (data) => {
        try {
            setState(prev => ({ ...prev, loading: true, error: null }));
            const user = await (0, authService_1.registerWithEmail)(data);
            setState(prev => ({ ...prev, user, loading: false }));
        }
        catch (error) {
            setState(prev => ({
                ...prev,
                loading: false,
                error: error.message
            }));
            throw error;
        }
    };
    const handleGoogleLogin = async () => {
        try {
            setState(prev => ({ ...prev, loading: true, error: null }));
            const user = await (0, authService_1.loginWithGoogle)();
            setState(prev => ({ ...prev, user, loading: false }));
        }
        catch (error) {
            setState(prev => ({
                ...prev,
                loading: false,
                error: error.message
            }));
            throw error;
        }
    };
    const handleLogout = async () => {
        try {
            setState(prev => ({ ...prev, loading: true, error: null }));
            await (0, authService_1.logout)();
            setState(prev => ({ ...prev, user: null, loading: false }));
        }
        catch (error) {
            setState(prev => ({
                ...prev,
                loading: false,
                error: error.message
            }));
            throw error;
        }
    };
    const handleResetPassword = async (email) => {
        try {
            setState(prev => ({ ...prev, loading: true, error: null }));
            await (0, authService_1.resetPassword)(email);
            setState(prev => ({ ...prev, loading: false }));
        }
        catch (error) {
            setState(prev => ({
                ...prev,
                loading: false,
                error: error.message
            }));
            throw error;
        }
    };
    const handleUpdateProfile = async (updates) => {
        if (!state.user) {
            throw new Error('Utilisateur non connecté');
        }
        try {
            setState(prev => ({ ...prev, loading: true, error: null }));
            await (0, authService_1.updateUserProfile)(state.user.uid, updates);
            // Mettre à jour l'état local
            setState(prev => ({
                ...prev,
                user: prev.user ? { ...prev.user, ...updates } : null,
                loading: false,
            }));
        }
        catch (error) {
            setState(prev => ({
                ...prev,
                loading: false,
                error: error.message
            }));
            throw error;
        }
    };
    const value = {
        ...state,
        login,
        register,
        loginWithGoogle: handleGoogleLogin,
        logout: handleLogout,
        resetPassword: handleResetPassword,
        updateProfile: handleUpdateProfile,
    };
    return ((0, jsx_runtime_1.jsx)(AuthContext.Provider, { value: value, children: children }));
};
exports.AuthProvider = AuthProvider;
const useAuth = () => {
    const context = (0, react_1.useContext)(AuthContext);
    if (context === undefined) {
        throw new Error('useAuth doit être utilisé dans un AuthProvider');
    }
    return context;
};
exports.useAuth = useAuth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,