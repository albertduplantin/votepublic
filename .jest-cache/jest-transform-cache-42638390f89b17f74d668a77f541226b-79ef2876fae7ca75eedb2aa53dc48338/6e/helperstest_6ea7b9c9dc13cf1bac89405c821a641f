f3a2adcebf1cb2b5c1f64b34f8ae8d11
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("../../utils/helpers");
describe('Helpers', () => {
    describe('generateId', () => {
        it('should generate unique IDs', () => {
            const id1 = (0, helpers_1.generateId)();
            const id2 = (0, helpers_1.generateId)();
            expect(id1).toBeDefined();
            expect(id2).toBeDefined();
            expect(id1).not.toBe(id2);
            expect(typeof id1).toBe('string');
        });
    });
    describe('isValidEmail', () => {
        it('should validate correct email addresses', () => {
            expect((0, helpers_1.isValidEmail)('test@example.com')).toBe(true);
            expect((0, helpers_1.isValidEmail)('user.name@domain.co.uk')).toBe(true);
            expect((0, helpers_1.isValidEmail)('test+tag@example.org')).toBe(true);
        });
        it('should reject invalid email addresses', () => {
            expect((0, helpers_1.isValidEmail)('invalid-email')).toBe(false);
            expect((0, helpers_1.isValidEmail)('test@')).toBe(false);
            expect((0, helpers_1.isValidEmail)('@example.com')).toBe(false);
            expect((0, helpers_1.isValidEmail)('')).toBe(false);
        });
    });
    describe('isValidPassword', () => {
        it('should validate passwords with minimum length', () => {
            expect((0, helpers_1.isValidPassword)('123456')).toBe(true);
            expect((0, helpers_1.isValidPassword)('password123')).toBe(true);
            expect((0, helpers_1.isValidPassword)('a'.repeat(10))).toBe(true);
        });
        it('should reject passwords that are too short', () => {
            expect((0, helpers_1.isValidPassword)('12345')).toBe(false);
            expect((0, helpers_1.isValidPassword)('')).toBe(false);
            expect((0, helpers_1.isValidPassword)('abc')).toBe(false);
        });
    });
    describe('formatRating', () => {
        it('should format ratings correctly', () => {
            expect((0, helpers_1.formatRating)(3.5)).toBe('3.5/5');
            expect((0, helpers_1.formatRating)(5)).toBe('5/5');
            expect((0, helpers_1.formatRating)(1)).toBe('1/5');
        });
    });
    describe('calculateAverageRating', () => {
        it('should calculate average rating correctly', () => {
            expect((0, helpers_1.calculateAverageRating)([1, 2, 3, 4, 5])).toBe(3);
            expect((0, helpers_1.calculateAverageRating)([5, 5, 5])).toBe(5);
            expect((0, helpers_1.calculateAverageRating)([1, 1])).toBe(1);
            expect((0, helpers_1.calculateAverageRating)([])).toBe(0);
        });
    });
    describe('cn', () => {
        it('should combine class names correctly', () => {
            expect((0, helpers_1.cn)('class1', 'class2')).toBe('class1 class2');
            expect((0, helpers_1.cn)('class1', undefined, 'class2')).toBe('class1 class2');
            expect((0, helpers_1.cn)('class1', null, 'class2')).toBe('class1 class2');
            expect((0, helpers_1.cn)('class1', false, 'class2')).toBe('class1 class2');
        });
        it('should handle empty values', () => {
            expect((0, helpers_1.cn)()).toBe('');
            expect((0, helpers_1.cn)('')).toBe('');
            expect((0, helpers_1.cn)(undefined, null, false, '')).toBe('');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,