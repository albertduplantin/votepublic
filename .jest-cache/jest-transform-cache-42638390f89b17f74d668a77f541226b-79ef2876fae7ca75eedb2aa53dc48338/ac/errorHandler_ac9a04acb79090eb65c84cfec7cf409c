431b78381ab17f589a24c57be213d51c
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useErrorHandler = exports.withErrorHandling = exports.errorHandler = exports.ErrorHandler = void 0;
const react_hot_toast_1 = __importDefault(require("react-hot-toast"));
const constants_1 = require("./constants");
class ErrorHandler {
    constructor() {
        this.errorLog = [];
    }
    static getInstance() {
        if (!ErrorHandler.instance) {
            ErrorHandler.instance = new ErrorHandler();
        }
        return ErrorHandler.instance;
    }
    /**
     * Gère une erreur de manière centralisée
     */
    handleError(error, context) {
        const appError = {
            ...error,
            context: context || 'unknown',
            timestamp: new Date().toISOString(),
        };
        // Logger l'erreur
        this.logError(appError);
        // Afficher un message utilisateur approprié
        this.showUserMessage(appError);
        // En production, envoyer à un service de monitoring
        if (process.env.NODE_ENV === 'production') {
            this.sendToMonitoring(appError);
        }
    }
    /**
     * Logger l'erreur localement
     */
    logError(error) {
        this.errorLog.push(error);
        // Limiter la taille du log
        if (this.errorLog.length > 100) {
            this.errorLog = this.errorLog.slice(-50);
        }
        console.error(`[${error.context}] ${error.message}`, {
            code: error.code,
            status: error.status,
            stack: error.stack,
        });
    }
    /**
     * Afficher un message utilisateur
     */
    showUserMessage(error) {
        let message = constants_1.ERROR_MESSAGES.NETWORK_ERROR;
        // Messages spécifiques selon le contexte
        switch (error.context) {
            case 'auth':
                message = constants_1.ERROR_MESSAGES.AUTH_ERROR;
                break;
            case 'vote':
                message = constants_1.ERROR_MESSAGES.VOTE_ERROR;
                break;
            case 'upload':
                message = constants_1.ERROR_MESSAGES.UPLOAD_ERROR;
                break;
            case 'permission':
                message = constants_1.ERROR_MESSAGES.PERMISSION_ERROR;
                break;
            case 'validation':
                message = constants_1.ERROR_MESSAGES.VALIDATION_ERROR;
                break;
            default:
                // Utiliser le message d'erreur Firebase si disponible
                if (error.code && error.code.startsWith('auth/')) {
                    message = this.getFirebaseErrorMessage(error.code);
                }
                else if (error.message) {
                    message = error.message;
                }
        }
        react_hot_toast_1.default.error(message);
    }
    /**
     * Envoyer l'erreur à un service de monitoring (ex: Sentry)
     */
    sendToMonitoring(error) {
        // TODO: Implémenter l'envoi vers un service de monitoring
        // Exemple avec Sentry:
        // Sentry.captureException(error);
    }
    /**
     * Récupérer les messages d'erreur Firebase
     */
    getFirebaseErrorMessage(code) {
        const errorMessages = {
            'auth/user-not-found': 'Aucun utilisateur trouvé avec cet email.',
            'auth/wrong-password': 'Mot de passe incorrect.',
            'auth/email-already-in-use': 'Cet email est déjà utilisé.',
            'auth/weak-password': 'Le mot de passe doit contenir au moins 6 caractères.',
            'auth/invalid-email': 'Adresse email invalide.',
            'auth/too-many-requests': 'Trop de tentatives. Réessayez plus tard.',
            'auth/popup-closed-by-user': 'Fenêtre de connexion fermée.',
            'auth/cancelled-popup-request': 'Connexion annulée.',
            'auth/network-request-failed': 'Erreur de réseau. Vérifiez votre connexion.',
        };
        return errorMessages[code] || constants_1.ERROR_MESSAGES.AUTH_ERROR;
    }
    /**
     * Récupérer l'historique des erreurs
     */
    getErrorLog() {
        return [...this.errorLog];
    }
    /**
     * Vider l'historique des erreurs
     */
    clearErrorLog() {
        this.errorLog = [];
    }
}
exports.ErrorHandler = ErrorHandler;
// Instance singleton
exports.errorHandler = ErrorHandler.getInstance();
/**
 * Wrapper pour les fonctions async avec gestion d'erreur automatique
 */
const withErrorHandling = (fn, context) => {
    return async (...args) => {
        try {
            return await fn(...args);
        }
        catch (error) {
            exports.errorHandler.handleError(error, context);
            throw error;
        }
    };
};
exports.withErrorHandling = withErrorHandling;
/**
 * Hook pour gérer les erreurs dans les composants
 */
const useErrorHandler = () => {
    const handleError = (error, context) => {
        exports.errorHandler.handleError(error, context);
    };
    return { handleError };
};
exports.useErrorHandler = useErrorHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,