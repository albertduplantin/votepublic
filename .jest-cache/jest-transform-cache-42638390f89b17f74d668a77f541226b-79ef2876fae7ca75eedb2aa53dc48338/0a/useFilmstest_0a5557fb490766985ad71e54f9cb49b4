f6c97a1b66916fdeee8427c912f9a86e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Mock du service de films
jest.mock('../../services/filmService');
// Mock de react-hot-toast
jest.mock('react-hot-toast', () => ({
    success: jest.fn(),
    error: jest.fn(),
}));
const react_1 = require("@testing-library/react");
const useFilms_1 = require("../../hooks/useFilms");
const filmService = __importStar(require("../../services/filmService"));
const mockFilmService = filmService;
describe('useFilms', () => {
    const mockFilms = [
        {
            id: '1',
            titre: 'Film Test 1',
            realisateur: 'Réalisateur 1',
            pays: 'France',
            duree: 15,
            annee: 2023,
            synopsis: 'Synopsis du film 1',
            genre: 'Drame',
            createdAt: new Date(),
            updatedAt: new Date(),
        },
        {
            id: '2',
            titre: 'Film Test 2',
            realisateur: 'Réalisateur 2',
            pays: 'Belgique',
            duree: 12,
            annee: 2023,
            synopsis: 'Synopsis du film 2',
            genre: 'Comédie',
            createdAt: new Date(),
            updatedAt: new Date(),
        },
    ];
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('loadFilms', () => {
        it('should load films successfully', async () => {
            mockFilmService.getAllFilms.mockResolvedValue(mockFilms);
            const { result } = (0, react_1.renderHook)(() => (0, useFilms_1.useFilms)());
            await (0, react_1.act)(async () => {
                await result.current.loadFilms();
            });
            expect(result.current.films).toEqual(mockFilms);
            expect(result.current.loading).toBe(false);
            expect(result.current.error).toBeNull();
        });
        it('should handle loading state correctly', async () => {
            mockFilmService.getAllFilms.mockImplementation(() => new Promise(resolve => setTimeout(() => resolve(mockFilms), 100)));
            const { result } = (0, react_1.renderHook)(() => (0, useFilms_1.useFilms)());
            (0, react_1.act)(() => {
                result.current.loadFilms();
            });
            // Pendant le chargement
            expect(result.current.loading).toBe(true);
            await (0, react_1.waitFor)(() => {
                expect(result.current.loading).toBe(false);
            });
        });
        it('should handle errors when loading films', async () => {
            const error = new Error('Erreur de chargement');
            mockFilmService.getAllFilms.mockRejectedValue(error);
            const { result } = (0, react_1.renderHook)(() => (0, useFilms_1.useFilms)());
            await (0, react_1.act)(async () => {
                await result.current.loadFilms();
            });
            expect(result.current.error).toBe('Erreur de chargement');
            expect(result.current.loading).toBe(false);
            expect(result.current.films).toEqual([]);
        });
    });
    describe('createFilm', () => {
        const newFilmData = {
            titre: 'Nouveau Film',
            realisateur: 'Nouveau Réalisateur',
            pays: 'Suisse',
            duree: 18,
            annee: 2024,
            synopsis: 'Synopsis du nouveau film',
            genre: 'Documentaire',
        };
        it('should create film successfully', async () => {
            const createdFilm = {
                id: '3',
                ...newFilmData,
                createdAt: new Date(),
                updatedAt: new Date(),
            };
            mockFilmService.createFilm.mockResolvedValue(createdFilm);
            const { result } = (0, react_1.renderHook)(() => (0, useFilms_1.useFilms)());
            // Charger les films existants
            mockFilmService.getAllFilms.mockResolvedValue(mockFilms);
            await (0, react_1.act)(async () => {
                await result.current.loadFilms();
            });
            // Créer un nouveau film
            await (0, react_1.act)(async () => {
                await result.current.createFilm(newFilmData);
            });
            expect(result.current.films).toHaveLength(3);
            expect(result.current.films).toContainEqual(createdFilm);
        });
        it('should handle errors when creating film', async () => {
            const error = new Error('Erreur de création');
            mockFilmService.createFilm.mockRejectedValue(error);
            const { result } = (0, react_1.renderHook)(() => (0, useFilms_1.useFilms)());
            await expect((0, react_1.act)(async () => {
                await result.current.createFilm(newFilmData);
            })).rejects.toThrow('Erreur de création');
        });
    });
    describe('editFilm', () => {
        it('should edit film successfully', async () => {
            const updatedData = {
                titre: 'Film Modifié',
                realisateur: 'Réalisateur Modifié',
            };
            mockFilmService.updateFilm.mockResolvedValue(undefined);
            const { result } = (0, react_1.renderHook)(() => (0, useFilms_1.useFilms)());
            // Charger les films existants
            mockFilmService.getAllFilms.mockResolvedValue(mockFilms);
            await (0, react_1.act)(async () => {
                await result.current.loadFilms();
            });
            // Modifier un film
            await (0, react_1.act)(async () => {
                await result.current.editFilm('1', updatedData);
            });
            expect(result.current.films[0]).toEqual({
                ...mockFilms[0],
                ...updatedData,
            });
        });
        it('should handle errors when editing film', async () => {
            const error = new Error('Erreur de modification');
            mockFilmService.updateFilm.mockRejectedValue(error);
            const { result } = (0, react_1.renderHook)(() => (0, useFilms_1.useFilms)());
            await expect((0, react_1.act)(async () => {
                await result.current.editFilm('1', { titre: 'Nouveau titre' });
            })).rejects.toThrow('Erreur de modification');
        });
    });
    describe('removeFilm', () => {
        it('should remove film successfully', async () => {
            mockFilmService.deleteFilm.mockResolvedValue(undefined);
            const { result } = (0, react_1.renderHook)(() => (0, useFilms_1.useFilms)());
            // Charger les films existants
            mockFilmService.getAllFilms.mockResolvedValue(mockFilms);
            await (0, react_1.act)(async () => {
                await result.current.loadFilms();
            });
            // Supprimer un film
            await (0, react_1.act)(async () => {
                await result.current.removeFilm('1');
            });
            expect(result.current.films).toHaveLength(1);
            expect(result.current.films[0].id).toBe('2');
        });
        it('should handle errors when removing film', async () => {
            const error = new Error('Erreur de suppression');
            mockFilmService.deleteFilm.mockRejectedValue(error);
            const { result } = (0, react_1.renderHook)(() => (0, useFilms_1.useFilms)());
            await expect((0, react_1.act)(async () => {
                await result.current.removeFilm('1');
            })).rejects.toThrow('Erreur de suppression');
        });
    });
    describe('Initial state', () => {
        it('should have correct initial state', () => {
            const { result } = (0, react_1.renderHook)(() => (0, useFilms_1.useFilms)());
            expect(result.current.films).toEqual([]);
            expect(result.current.loading).toBe(true);
            expect(result.current.error).toBeNull();
        });
    });
    describe('Error handling', () => {
        it('should clear error when loading films successfully after error', async () => {
            // Premier appel échoue
            mockFilmService.getAllFilms.mockRejectedValueOnce(new Error('Erreur initiale'));
            const { result } = (0, react_1.renderHook)(() => (0, useFilms_1.useFilms)());
            await (0, react_1.act)(async () => {
                await result.current.loadFilms();
            });
            expect(result.current.error).toBe('Erreur initiale');
            // Deuxième appel réussit
            mockFilmService.getAllFilms.mockResolvedValueOnce(mockFilms);
            await (0, react_1.act)(async () => {
                await result.current.loadFilms();
            });
            expect(result.current.error).toBeNull();
            expect(result.current.films).toEqual(mockFilms);
        });
    });
    describe('Performance', () => {
        it('should not cause unnecessary re-renders', async () => {
            const { result, rerender } = (0, react_1.renderHook)(() => (0, useFilms_1.useFilms)());
            const initialRenderCount = result.current.films.length;
            // Re-render sans changement
            rerender();
            expect(result.current.films.length).toBe(initialRenderCount);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,