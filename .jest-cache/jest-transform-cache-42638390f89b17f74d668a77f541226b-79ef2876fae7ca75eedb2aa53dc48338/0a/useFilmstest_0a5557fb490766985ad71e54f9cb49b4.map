{"file":"D:\\Documents\\aiprojets\\votepublic\\src\\__tests__\\hooks\\useFilms.test.ts","mappings":"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","names":[],"sources":["D:\\Documents\\aiprojets\\votepublic\\src\\__tests__\\hooks\\useFilms.test.ts"],"sourcesContent":["import { renderHook, act, waitFor } from '@testing-library/react';\r\nimport { useFilms } from '../../hooks/useFilms';\r\nimport * as filmService from '../../services/filmService';\r\nimport { Film } from '../../types';\r\n\r\n// Mock du service de films\r\njest.mock('../../services/filmService');\r\nconst mockFilmService = filmService as jest.Mocked<typeof filmService>;\r\n\r\n// Mock de react-hot-toast\r\njest.mock('react-hot-toast', () => ({\r\n  success: jest.fn(),\r\n  error: jest.fn(),\r\n}));\r\n\r\ndescribe('useFilms', () => {\r\n  const mockFilms: Film[] = [\r\n    {\r\n      id: '1',\r\n      titre: 'Film Test 1',\r\n      realisateur: 'Réalisateur 1',\r\n      pays: 'France',\r\n      duree: 15,\r\n      annee: 2023,\r\n      synopsis: 'Synopsis du film 1',\r\n      genre: 'Drame',\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n    },\r\n    {\r\n      id: '2',\r\n      titre: 'Film Test 2',\r\n      realisateur: 'Réalisateur 2',\r\n      pays: 'Belgique',\r\n      duree: 12,\r\n      annee: 2023,\r\n      synopsis: 'Synopsis du film 2',\r\n      genre: 'Comédie',\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n    },\r\n  ];\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('loadFilms', () => {\r\n    it('should load films successfully', async () => {\r\n      mockFilmService.getAllFilms.mockResolvedValue(mockFilms);\r\n\r\n      const { result } = renderHook(() => useFilms());\r\n\r\n      await act(async () => {\r\n        await result.current.loadFilms();\r\n      });\r\n\r\n      expect(result.current.films).toEqual(mockFilms);\r\n      expect(result.current.loading).toBe(false);\r\n      expect(result.current.error).toBeNull();\r\n    });\r\n\r\n    it('should handle loading state correctly', async () => {\r\n      mockFilmService.getAllFilms.mockImplementation(\r\n        () => new Promise(resolve => setTimeout(() => resolve(mockFilms), 100))\r\n      );\r\n\r\n      const { result } = renderHook(() => useFilms());\r\n\r\n      act(() => {\r\n        result.current.loadFilms();\r\n      });\r\n\r\n      // Pendant le chargement\r\n      expect(result.current.loading).toBe(true);\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n    });\r\n\r\n    it('should handle errors when loading films', async () => {\r\n      const error = new Error('Erreur de chargement');\r\n      mockFilmService.getAllFilms.mockRejectedValue(error);\r\n\r\n      const { result } = renderHook(() => useFilms());\r\n\r\n      await act(async () => {\r\n        await result.current.loadFilms();\r\n      });\r\n\r\n      expect(result.current.error).toBe('Erreur de chargement');\r\n      expect(result.current.loading).toBe(false);\r\n      expect(result.current.films).toEqual([]);\r\n    });\r\n  });\r\n\r\n  describe('createFilm', () => {\r\n    const newFilmData = {\r\n      titre: 'Nouveau Film',\r\n      realisateur: 'Nouveau Réalisateur',\r\n      pays: 'Suisse',\r\n      duree: 18,\r\n      annee: 2024,\r\n      synopsis: 'Synopsis du nouveau film',\r\n      genre: 'Documentaire',\r\n    };\r\n\r\n    it('should create film successfully', async () => {\r\n      const createdFilm: Film = {\r\n        id: '3',\r\n        ...newFilmData,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      };\r\n\r\n      mockFilmService.createFilm.mockResolvedValue(createdFilm);\r\n\r\n      const { result } = renderHook(() => useFilms());\r\n\r\n      // Charger les films existants\r\n      mockFilmService.getAllFilms.mockResolvedValue(mockFilms);\r\n      await act(async () => {\r\n        await result.current.loadFilms();\r\n      });\r\n\r\n      // Créer un nouveau film\r\n      await act(async () => {\r\n        await result.current.createFilm(newFilmData);\r\n      });\r\n\r\n      expect(result.current.films).toHaveLength(3);\r\n      expect(result.current.films).toContainEqual(createdFilm);\r\n    });\r\n\r\n    it('should handle errors when creating film', async () => {\r\n      const error = new Error('Erreur de création');\r\n      mockFilmService.createFilm.mockRejectedValue(error);\r\n\r\n      const { result } = renderHook(() => useFilms());\r\n\r\n      await expect(\r\n        act(async () => {\r\n          await result.current.createFilm(newFilmData);\r\n        })\r\n      ).rejects.toThrow('Erreur de création');\r\n    });\r\n  });\r\n\r\n  describe('editFilm', () => {\r\n    it('should edit film successfully', async () => {\r\n      const updatedData = {\r\n        titre: 'Film Modifié',\r\n        realisateur: 'Réalisateur Modifié',\r\n      };\r\n\r\n      mockFilmService.updateFilm.mockResolvedValue(undefined);\r\n\r\n      const { result } = renderHook(() => useFilms());\r\n\r\n      // Charger les films existants\r\n      mockFilmService.getAllFilms.mockResolvedValue(mockFilms);\r\n      await act(async () => {\r\n        await result.current.loadFilms();\r\n      });\r\n\r\n      // Modifier un film\r\n      await act(async () => {\r\n        await result.current.editFilm('1', updatedData);\r\n      });\r\n\r\n      expect(result.current.films[0]).toEqual({\r\n        ...mockFilms[0],\r\n        ...updatedData,\r\n      });\r\n    });\r\n\r\n    it('should handle errors when editing film', async () => {\r\n      const error = new Error('Erreur de modification');\r\n      mockFilmService.updateFilm.mockRejectedValue(error);\r\n\r\n      const { result } = renderHook(() => useFilms());\r\n\r\n      await expect(\r\n        act(async () => {\r\n          await result.current.editFilm('1', { titre: 'Nouveau titre' });\r\n        })\r\n      ).rejects.toThrow('Erreur de modification');\r\n    });\r\n  });\r\n\r\n  describe('removeFilm', () => {\r\n    it('should remove film successfully', async () => {\r\n      mockFilmService.deleteFilm.mockResolvedValue(undefined);\r\n\r\n      const { result } = renderHook(() => useFilms());\r\n\r\n      // Charger les films existants\r\n      mockFilmService.getAllFilms.mockResolvedValue(mockFilms);\r\n      await act(async () => {\r\n        await result.current.loadFilms();\r\n      });\r\n\r\n      // Supprimer un film\r\n      await act(async () => {\r\n        await result.current.removeFilm('1');\r\n      });\r\n\r\n      expect(result.current.films).toHaveLength(1);\r\n      expect(result.current.films[0].id).toBe('2');\r\n    });\r\n\r\n    it('should handle errors when removing film', async () => {\r\n      const error = new Error('Erreur de suppression');\r\n      mockFilmService.deleteFilm.mockRejectedValue(error);\r\n\r\n      const { result } = renderHook(() => useFilms());\r\n\r\n      await expect(\r\n        act(async () => {\r\n          await result.current.removeFilm('1');\r\n        })\r\n      ).rejects.toThrow('Erreur de suppression');\r\n    });\r\n  });\r\n\r\n  describe('Initial state', () => {\r\n    it('should have correct initial state', () => {\r\n      const { result } = renderHook(() => useFilms());\r\n\r\n      expect(result.current.films).toEqual([]);\r\n      expect(result.current.loading).toBe(true);\r\n      expect(result.current.error).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('Error handling', () => {\r\n    it('should clear error when loading films successfully after error', async () => {\r\n      // Premier appel échoue\r\n      mockFilmService.getAllFilms.mockRejectedValueOnce(new Error('Erreur initiale'));\r\n\r\n      const { result } = renderHook(() => useFilms());\r\n\r\n      await act(async () => {\r\n        await result.current.loadFilms();\r\n      });\r\n\r\n      expect(result.current.error).toBe('Erreur initiale');\r\n\r\n      // Deuxième appel réussit\r\n      mockFilmService.getAllFilms.mockResolvedValueOnce(mockFilms);\r\n\r\n      await act(async () => {\r\n        await result.current.loadFilms();\r\n      });\r\n\r\n      expect(result.current.error).toBeNull();\r\n      expect(result.current.films).toEqual(mockFilms);\r\n    });\r\n  });\r\n\r\n  describe('Performance', () => {\r\n    it('should not cause unnecessary re-renders', async () => {\r\n      const { result, rerender } = renderHook(() => useFilms());\r\n\r\n      const initialRenderCount = result.current.films.length;\r\n\r\n      // Re-render sans changement\r\n      rerender();\r\n\r\n      expect(result.current.films.length).toBe(initialRenderCount);\r\n    });\r\n  });\r\n});"],"version":3}