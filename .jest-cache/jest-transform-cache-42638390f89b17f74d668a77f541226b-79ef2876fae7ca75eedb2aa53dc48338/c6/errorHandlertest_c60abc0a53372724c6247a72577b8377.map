{"file":"D:\\Documents\\aiprojets\\votepublic\\src\\__tests__\\utils\\errorHandler.test.ts","mappings":"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","names":[],"sources":["D:\\Documents\\aiprojets\\votepublic\\src\\__tests__\\utils\\errorHandler.test.ts"],"sourcesContent":["import { ErrorHandler, errorHandler, withErrorHandling, useErrorHandler } from '../../utils/errorHandler';\r\nimport { AppError } from '../../utils/errorHandler';\r\n\r\n// Mock de react-hot-toast\r\nconst mockToast = {\r\n  error: jest.fn(),\r\n  success: jest.fn(),\r\n};\r\n\r\njest.mock('react-hot-toast', () => ({\r\n  toast: mockToast,\r\n}));\r\n\r\ndescribe('ErrorHandler', () => {\r\n  let errorHandlerInstance: ErrorHandler;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    errorHandlerInstance = new ErrorHandler();\r\n  });\r\n\r\n  describe('handleError', () => {\r\n    it('should handle errors with context', () => {\r\n      const error = new Error('Test error') as AppError;\r\n      error.code = 'TEST_ERROR';\r\n      error.context = 'test';\r\n\r\n      errorHandlerInstance.handleError(error, 'auth');\r\n\r\n      expect(error.context).toBe('auth');\r\n      expect(error.timestamp).toBeDefined();\r\n    });\r\n\r\n    it('should log errors correctly', () => {\r\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\r\n      const error = new Error('Test error') as AppError;\r\n\r\n      errorHandlerInstance.handleError(error, 'test');\r\n\r\n      expect(consoleSpy).toHaveBeenCalledWith(\r\n        '[test] Test error',\r\n        expect.objectContaining({\r\n          code: undefined,\r\n          status: undefined,\r\n          stack: expect.any(String),\r\n        })\r\n      );\r\n\r\n      consoleSpy.mockRestore();\r\n    });\r\n\r\n    it('should limit error log size', () => {\r\n      const error = new Error('Test error') as AppError;\r\n\r\n      // Ajouter plus de 100 erreurs\r\n      for (let i = 0; i < 150; i++) {\r\n        errorHandlerInstance.handleError(error, 'test');\r\n      }\r\n\r\n      const errorLog = errorHandlerInstance.getErrorLog();\r\n      expect(errorLog.length).toBeLessThanOrEqual(50);\r\n    });\r\n  });\r\n\r\n  describe('showUserMessage', () => {\r\n    it('should show auth error message', () => {\r\n      const error = new Error('Auth error') as AppError;\r\n      error.context = 'auth';\r\n\r\n      errorHandlerInstance.handleError(error);\r\n\r\n      expect(mockToast.error).toHaveBeenCalledWith('Erreur d\\'authentification. Veuillez réessayer.');\r\n    });\r\n\r\n    it('should show vote error message', () => {\r\n      const error = new Error('Vote error') as AppError;\r\n      error.context = 'vote';\r\n\r\n      errorHandlerInstance.handleError(error);\r\n\r\n      expect(mockToast.error).toHaveBeenCalledWith('Erreur lors du vote. Veuillez réessayer.');\r\n    });\r\n\r\n    it('should show upload error message', () => {\r\n      const error = new Error('Upload error') as AppError;\r\n      error.context = 'upload';\r\n\r\n      errorHandlerInstance.handleError(error);\r\n\r\n      expect(mockToast.error).toHaveBeenCalledWith('Erreur lors du téléchargement. Veuillez réessayer.');\r\n    });\r\n\r\n    it('should show permission error message', () => {\r\n      const error = new Error('Permission error') as AppError;\r\n      error.context = 'permission';\r\n\r\n      errorHandlerInstance.handleError(error);\r\n\r\n      expect(mockToast.error).toHaveBeenCalledWith('Vous n\\'avez pas les permissions nécessaires.');\r\n    });\r\n\r\n    it('should show validation error message', () => {\r\n      const error = new Error('Validation error') as AppError;\r\n      error.context = 'validation';\r\n\r\n      errorHandlerInstance.handleError(error);\r\n\r\n      expect(mockToast.error).toHaveBeenCalledWith('Veuillez vérifier les informations saisies.');\r\n    });\r\n\r\n    it('should show Firebase auth error messages', () => {\r\n      const error = new Error('Firebase error') as AppError;\r\n      error.code = 'auth/user-not-found';\r\n\r\n      errorHandlerInstance.handleError(error);\r\n\r\n      expect(mockToast.error).toHaveBeenCalledWith('Aucun utilisateur trouvé avec cet email.');\r\n    });\r\n\r\n    it('should show custom error message when available', () => {\r\n      const error = new Error('Custom error message') as AppError;\r\n\r\n      errorHandlerInstance.handleError(error);\r\n\r\n      expect(mockToast.error).toHaveBeenCalledWith('Custom error message');\r\n    });\r\n\r\n    it('should show default network error message', () => {\r\n      const error = new Error('Unknown error') as AppError;\r\n      error.context = 'unknown';\r\n\r\n      errorHandlerInstance.handleError(error);\r\n\r\n      expect(mockToast.error).toHaveBeenCalledWith('Erreur de connexion. Vérifiez votre connexion internet.');\r\n    });\r\n  });\r\n\r\n  describe('getFirebaseErrorMessage', () => {\r\n    it('should return correct Firebase error messages', () => {\r\n      const errorMessages = {\r\n        'auth/user-not-found': 'Aucun utilisateur trouvé avec cet email.',\r\n        'auth/wrong-password': 'Mot de passe incorrect.',\r\n        'auth/email-already-in-use': 'Cet email est déjà utilisé.',\r\n        'auth/weak-password': 'Le mot de passe doit contenir au moins 6 caractères.',\r\n        'auth/invalid-email': 'Adresse email invalide.',\r\n        'auth/too-many-requests': 'Trop de tentatives. Réessayez plus tard.',\r\n        'auth/popup-closed-by-user': 'Fenêtre de connexion fermée.',\r\n        'auth/cancelled-popup-request': 'Connexion annulée.',\r\n        'auth/network-request-failed': 'Erreur de réseau. Vérifiez votre connexion.',\r\n      };\r\n\r\n      Object.entries(errorMessages).forEach(([code, message]) => {\r\n        const error = new Error('Firebase error') as AppError;\r\n        error.code = code;\r\n\r\n        errorHandlerInstance.handleError(error);\r\n\r\n        expect(mockToast.error).toHaveBeenCalledWith(message);\r\n      });\r\n    });\r\n\r\n    it('should return default auth error for unknown Firebase codes', () => {\r\n      const error = new Error('Firebase error') as AppError;\r\n      error.code = 'auth/unknown-error';\r\n\r\n      errorHandlerInstance.handleError(error);\r\n\r\n      expect(mockToast.error).toHaveBeenCalledWith('Erreur d\\'authentification. Veuillez réessayer.');\r\n    });\r\n  });\r\n\r\n  describe('Error log management', () => {\r\n    it('should get error log', () => {\r\n      const error = new Error('Test error') as AppError;\r\n      errorHandlerInstance.handleError(error, 'test');\r\n\r\n      const log = errorHandlerInstance.getErrorLog();\r\n      expect(log).toHaveLength(1);\r\n      expect(log[0].message).toBe('Test error');\r\n    });\r\n\r\n    it('should clear error log', () => {\r\n      const error = new Error('Test error') as AppError;\r\n      errorHandlerInstance.handleError(error, 'test');\r\n\r\n      expect(errorHandlerInstance.getErrorLog()).toHaveLength(1);\r\n\r\n      errorHandlerInstance.clearErrorLog();\r\n\r\n      expect(errorHandlerInstance.getErrorLog()).toHaveLength(0);\r\n    });\r\n  });\r\n\r\n  describe('Singleton pattern', () => {\r\n    it('should return the same instance', () => {\r\n      const instance1 = ErrorHandler.getInstance();\r\n      const instance2 = ErrorHandler.getInstance();\r\n\r\n      expect(instance1).toBe(instance2);\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('withErrorHandling', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should wrap function with error handling', async () => {\r\n    const mockFn = jest.fn().mockResolvedValue('success');\r\n    const wrappedFn = withErrorHandling(mockFn, 'test');\r\n\r\n    const result = await wrappedFn('arg1', 'arg2');\r\n\r\n    expect(result).toBe('success');\r\n    expect(mockFn).toHaveBeenCalledWith('arg1', 'arg2');\r\n  });\r\n\r\n  it('should handle errors in wrapped function', async () => {\r\n    const error = new Error('Test error');\r\n    const mockFn = jest.fn().mockRejectedValue(error);\r\n    const wrappedFn = withErrorHandling(mockFn, 'test');\r\n\r\n    await expect(wrappedFn()).rejects.toThrow('Test error');\r\n    expect(mockToast.error).toHaveBeenCalledWith('Erreur de connexion. Vérifiez votre connexion internet.');\r\n  });\r\n});\r\n\r\ndescribe('useErrorHandler', () => {\r\n  it('should return error handler hook', () => {\r\n    const { handleError } = useErrorHandler();\r\n\r\n    expect(typeof handleError).toBe('function');\r\n  });\r\n\r\n  it('should handle errors through hook', () => {\r\n    const { handleError } = useErrorHandler();\r\n    const error = new Error('Test error') as AppError;\r\n\r\n    handleError(error, 'test');\r\n\r\n    expect(mockToast.error).toHaveBeenCalledWith('Erreur de connexion. Vérifiez votre connexion internet.');\r\n  });\r\n});\r\n\r\ndescribe('Production monitoring', () => {\r\n  const originalEnv = process.env.NODE_ENV;\r\n\r\n  afterEach(() => {\r\n    process.env.NODE_ENV = originalEnv;\r\n  });\r\n\r\n  it('should send errors to monitoring in production', () => {\r\n    process.env.NODE_ENV = 'production';\r\n    \r\n    // Mock pour simuler l'envoi vers un service de monitoring\r\n    const mockSendToMonitoring = jest.fn();\r\n    jest.spyOn(console, 'log').mockImplementation(mockSendToMonitoring);\r\n\r\n    const error = new Error('Production error') as AppError;\r\n    errorHandler.handleError(error, 'test');\r\n\r\n    // En production, on pourrait vérifier l'appel au service de monitoring\r\n    // Pour l'instant, on vérifie juste que le code s'exécute sans erreur\r\n    expect(mockToast.error).toHaveBeenCalled();\r\n  });\r\n});"],"version":3}