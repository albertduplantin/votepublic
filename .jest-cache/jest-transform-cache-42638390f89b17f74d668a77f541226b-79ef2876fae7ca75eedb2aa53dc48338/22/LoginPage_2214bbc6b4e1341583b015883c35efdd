efc30a5823ea035fe06595fb0d0a9e09
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoginPage = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_router_dom_1 = require("react-router-dom");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const react_hot_toast_1 = __importDefault(require("react-hot-toast"));
const lucide_react_1 = require("lucide-react");
const AuthContext_1 = require("../contexts/AuthContext");
const constants_1 = require("../utils/constants");
// Schéma de validation pour la connexion
const loginSchema = zod_2.z.object({
    email: zod_2.z.string().email('Adresse email invalide'),
    password: zod_2.z.string().min(1, 'Le mot de passe est requis'),
});
const LoginPage = () => {
    const { login, loginWithGoogle, loading } = (0, AuthContext_1.useAuth)();
    const navigate = (0, react_router_dom_1.useNavigate)();
    const location = (0, react_router_dom_1.useLocation)();
    const [showPassword, setShowPassword] = (0, react_1.useState)(false);
    const [isGoogleLoading, setIsGoogleLoading] = (0, react_1.useState)(false);
    const from = location.state?.from?.pathname || constants_1.ROUTES.HOME;
    const { register, handleSubmit, formState: { errors, isSubmitting }, } = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(loginSchema),
    });
    // Connexion avec email/mot de passe
    const onSubmit = async (data) => {
        try {
            await login(data);
            react_hot_toast_1.default.success(constants_1.SUCCESS_MESSAGES.LOGIN_SUCCESS);
            navigate(from, { replace: true });
        }
        catch (error) {
            react_hot_toast_1.default.error(error.message || constants_1.ERROR_MESSAGES.AUTH_ERROR);
        }
    };
    // Connexion avec Google
    const handleGoogleLogin = async () => {
        setIsGoogleLoading(true);
        try {
            await loginWithGoogle();
            react_hot_toast_1.default.success(constants_1.SUCCESS_MESSAGES.LOGIN_SUCCESS);
            navigate(from, { replace: true });
        }
        catch (error) {
            react_hot_toast_1.default.error(error.message || constants_1.ERROR_MESSAGES.AUTH_ERROR);
        }
        finally {
            setIsGoogleLoading(false);
        }
    };
    if (loading) {
        return ((0, jsx_runtime_1.jsx)("div", { className: "min-h-screen flex items-center justify-center bg-gray-50", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto" }), (0, jsx_runtime_1.jsx)("p", { className: "mt-4 text-gray-600", children: "Chargement..." })] }) }));
    }
    return ((0, jsx_runtime_1.jsx)("div", { className: "min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8", children: (0, jsx_runtime_1.jsxs)("div", { className: "max-w-md w-full space-y-8", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsxs)(react_router_dom_1.Link, { to: constants_1.ROUTES.HOME, className: "inline-flex items-center text-sm text-gray-600 hover:text-gray-900 mb-4", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: "w-4 h-4 mr-1" }), "Retour \u00E0 l'accueil"] }), (0, jsx_runtime_1.jsx)("h2", { className: "text-3xl font-bold text-gray-900", children: "Connexion" }), (0, jsx_runtime_1.jsx)("p", { className: "mt-2 text-sm text-gray-600", children: "Connectez-vous pour acc\u00E9der \u00E0 votre compte" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "card", children: [(0, jsx_runtime_1.jsxs)("form", { onSubmit: handleSubmit(onSubmit), className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("label", { htmlFor: "email", className: "form-label", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Mail, { className: "w-4 h-4 inline mr-2" }), "Adresse email"] }), (0, jsx_runtime_1.jsx)("input", { id: "email", type: "email", ...register('email'), className: "input-field", placeholder: "votre@email.com", autoComplete: "email" }), errors.email && ((0, jsx_runtime_1.jsx)("p", { className: "form-error", children: errors.email.message?.toString() }))] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("label", { htmlFor: "password", className: "form-label", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Lock, { className: "w-4 h-4 inline mr-2" }), "Mot de passe"] }), (0, jsx_runtime_1.jsxs)("div", { className: "relative", children: [(0, jsx_runtime_1.jsx)("input", { id: "password", type: showPassword ? 'text' : 'password', ...register('password'), className: "input-field pr-10", placeholder: "Votre mot de passe", autoComplete: "current-password" }), (0, jsx_runtime_1.jsx)("button", { type: "button", onClick: () => setShowPassword(!showPassword), className: "absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600", children: showPassword ? ((0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { className: "w-5 h-5" })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: "w-5 h-5" })) })] }), errors.password && ((0, jsx_runtime_1.jsx)("p", { className: "form-error", children: errors.password.message?.toString() }))] }), (0, jsx_runtime_1.jsx)("button", { type: "submit", disabled: isSubmitting, className: "btn-primary w-full disabled:opacity-50 disabled:cursor-not-allowed", children: isSubmitting ? ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" }), "Connexion en cours..."] })) : ('Se connecter') })] }), (0, jsx_runtime_1.jsx)("div", { className: "mt-6", children: (0, jsx_runtime_1.jsxs)("div", { className: "relative", children: [(0, jsx_runtime_1.jsx)("div", { className: "absolute inset-0 flex items-center", children: (0, jsx_runtime_1.jsx)("div", { className: "w-full border-t border-gray-300" }) }), (0, jsx_runtime_1.jsx)("div", { className: "relative flex justify-center text-sm", children: (0, jsx_runtime_1.jsx)("span", { className: "px-2 bg-white text-gray-500", children: "Ou continuer avec" }) })] }) }), (0, jsx_runtime_1.jsxs)("button", { onClick: handleGoogleLogin, disabled: isGoogleLoading, className: "mt-6 w-full flex justify-center items-center px-4 py-2 border border-gray-300 rounded-lg shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed", children: [isGoogleLoading ? ((0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600 mr-2" })) : ((0, jsx_runtime_1.jsxs)("svg", { className: "w-5 h-5 mr-2", viewBox: "0 0 24 24", children: [(0, jsx_runtime_1.jsx)("path", { fill: "#4285F4", d: "M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" }), (0, jsx_runtime_1.jsx)("path", { fill: "#34A853", d: "M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" }), (0, jsx_runtime_1.jsx)("path", { fill: "#FBBC05", d: "M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" }), (0, jsx_runtime_1.jsx)("path", { fill: "#EA4335", d: "M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" })] })), "Continuer avec Google"] }), (0, jsx_runtime_1.jsxs)("div", { className: "mt-6 text-center space-y-2", children: [(0, jsx_runtime_1.jsx)(react_router_dom_1.Link, { to: constants_1.ROUTES.REGISTER, className: "text-sm text-primary-600 hover:text-primary-500", children: "Pas encore de compte ? S'inscrire" }), (0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)("button", { onClick: () => {
                                            const email = document.getElementById('email')?.value;
                                            if (email) {
                                                // Ici vous pourriez implémenter la réinitialisation du mot de passe
                                                react_hot_toast_1.default.success('Un email de réinitialisation a été envoyé');
                                            }
                                            else {
                                                react_hot_toast_1.default.error('Veuillez saisir votre email d\'abord');
                                            }
                                        }, className: "text-sm text-gray-600 hover:text-gray-500", children: "Mot de passe oubli\u00E9 ?" }) })] })] })] }) }));
};
exports.LoginPage = LoginPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,