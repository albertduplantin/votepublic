{"file":"D:\\Documents\\aiprojets\\votepublic\\src\\services\\authService.ts","mappings":"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","names":[],"sources":["D:\\Documents\\aiprojets\\votepublic\\src\\services\\authService.ts"],"sourcesContent":["import {\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n  signOut,\r\n  sendPasswordResetEmail,\r\n  updateProfile,\r\n  User as FirebaseUser,\r\n  onAuthStateChanged,\r\n} from 'firebase/auth';\r\nimport { doc, setDoc, getDoc, updateDoc } from 'firebase/firestore';\r\nimport { auth, db } from './firebase';\r\nimport { User, LoginFormData, RegisterFormData } from '../types';\r\nimport { COLLECTIONS } from '../utils/constants';\r\n\r\n// Provider Google\r\nconst googleProvider = new GoogleAuthProvider();\r\n\r\n/**\r\n * Connexion avec email et mot de passe\r\n */\r\nexport const loginWithEmail = async (data: LoginFormData): Promise<User> => {\r\n  try {\r\n    const userCredential = await signInWithEmailAndPassword(\r\n      auth,\r\n      data.email,\r\n      data.password\r\n    );\r\n    \r\n    const user = await getUserData(userCredential.user.uid);\r\n    return user;\r\n  } catch (error: any) {\r\n    throw new Error(getAuthErrorMessage(error.code));\r\n  }\r\n};\r\n\r\n/**\r\n * Inscription avec email et mot de passe\r\n */\r\nexport const registerWithEmail = async (data: RegisterFormData): Promise<User> => {\r\n  try {\r\n    const userCredential = await createUserWithEmailAndPassword(\r\n      auth,\r\n      data.email,\r\n      data.password\r\n    );\r\n\r\n    // Créer le profil utilisateur\r\n    const userData: Omit<User, 'uid'> = {\r\n      email: data.email,\r\n      displayName: data.email.split('@')[0],\r\n      photoURL: undefined,\r\n      isAdmin: false,\r\n      createdAt: new Date(),\r\n    };\r\n\r\n    await setDoc(doc(db, COLLECTIONS.USERS, userCredential.user.uid), userData);\r\n\r\n    return {\r\n      uid: userCredential.user.uid,\r\n      ...userData,\r\n    };\r\n  } catch (error: any) {\r\n    throw new Error(getAuthErrorMessage(error.code));\r\n  }\r\n};\r\n\r\n/**\r\n * Connexion avec Google\r\n */\r\nexport const loginWithGoogle = async (): Promise<User> => {\r\n  try {\r\n    const result = await signInWithPopup(auth, googleProvider);\r\n    const user = result.user;\r\n\r\n    // Vérifier si l'utilisateur existe déjà\r\n    const userDoc = await getDoc(doc(db, COLLECTIONS.USERS, user.uid));\r\n\r\n    if (!userDoc.exists()) {\r\n      // Créer un nouvel utilisateur\r\n      const userData: Omit<User, 'uid'> = {\r\n        email: user.email!,\r\n        displayName: user.displayName || user.email!.split('@')[0],\r\n        photoURL: user.photoURL || undefined,\r\n        isAdmin: false,\r\n        createdAt: new Date(),\r\n      };\r\n\r\n      await setDoc(doc(db, COLLECTIONS.USERS, user.uid), userData);\r\n\r\n      return {\r\n        uid: user.uid,\r\n        ...userData,\r\n      };\r\n    } else {\r\n      // Récupérer les données existantes\r\n      return await getUserData(user.uid);\r\n    }\r\n  } catch (error: any) {\r\n    throw new Error(getAuthErrorMessage(error.code));\r\n  }\r\n};\r\n\r\n/**\r\n * Déconnexion\r\n */\r\nexport const logout = async (): Promise<void> => {\r\n  try {\r\n    await signOut(auth);\r\n  } catch (error: any) {\r\n    throw new Error(getAuthErrorMessage(error.code));\r\n  }\r\n};\r\n\r\n/**\r\n * Réinitialisation du mot de passe\r\n */\r\nexport const resetPassword = async (email: string): Promise<void> => {\r\n  try {\r\n    await sendPasswordResetEmail(auth, email);\r\n  } catch (error: any) {\r\n    throw new Error(getAuthErrorMessage(error.code));\r\n  }\r\n};\r\n\r\n/**\r\n * Mise à jour du profil\r\n */\r\nexport const updateUserProfile = async (\r\n  uid: string,\r\n  updates: Partial<User>\r\n): Promise<void> => {\r\n  try {\r\n    // Mettre à jour Firebase Auth si nécessaire\r\n    if (auth.currentUser && auth.currentUser.uid === uid) {\r\n      await updateProfile(auth.currentUser, {\r\n        displayName: updates.displayName,\r\n        photoURL: updates.photoURL,\r\n      });\r\n    }\r\n\r\n    // Mettre à jour Firestore\r\n    const userRef = doc(db, COLLECTIONS.USERS, uid);\r\n    await updateDoc(userRef, updates);\r\n  } catch (error: any) {\r\n    throw new Error(getAuthErrorMessage(error.code));\r\n  }\r\n};\r\n\r\n/**\r\n * Récupérer les données utilisateur depuis Firestore\r\n */\r\nexport const getUserData = async (uid: string): Promise<User> => {\r\n  try {\r\n    const userDoc = await getDoc(doc(db, COLLECTIONS.USERS, uid));\r\n    \r\n    if (!userDoc.exists()) {\r\n      throw new Error('Utilisateur non trouvé');\r\n    }\r\n\r\n    const userData = userDoc.data();\r\n    return {\r\n      uid,\r\n      ...userData,\r\n      createdAt: userData.createdAt?.toDate() || new Date(),\r\n    } as User;\r\n  } catch (error: any) {\r\n    throw new Error('Erreur lors de la récupération des données utilisateur');\r\n  }\r\n};\r\n\r\n/**\r\n * Écouter les changements d'état d'authentification\r\n */\r\nexport const onAuthStateChange = (callback: (user: User | null) => void) => {\r\n  return onAuthStateChanged(auth, async (firebaseUser: FirebaseUser | null) => {\r\n    if (firebaseUser) {\r\n      try {\r\n        const user = await getUserData(firebaseUser.uid);\r\n        callback(user);\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération des données utilisateur:', error);\r\n        callback(null);\r\n      }\r\n    } else {\r\n      callback(null);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Traduire les codes d'erreur Firebase\r\n */\r\nconst getAuthErrorMessage = (errorCode: string): string => {\r\n  const errorMessages: Record<string, string> = {\r\n    'auth/user-not-found': 'Aucun utilisateur trouvé avec cet email.',\r\n    'auth/wrong-password': 'Mot de passe incorrect.',\r\n    'auth/email-already-in-use': 'Cet email est déjà utilisé.',\r\n    'auth/weak-password': 'Le mot de passe doit contenir au moins 6 caractères.',\r\n    'auth/invalid-email': 'Adresse email invalide.',\r\n    'auth/too-many-requests': 'Trop de tentatives. Réessayez plus tard.',\r\n    'auth/popup-closed-by-user': 'Fenêtre de connexion fermée.',\r\n    'auth/cancelled-popup-request': 'Connexion annulée.',\r\n    'auth/network-request-failed': 'Erreur de réseau. Vérifiez votre connexion.',\r\n  };\r\n\r\n  return errorMessages[errorCode] || 'Une erreur est survenue lors de l\\'authentification.';\r\n}; "],"version":3}