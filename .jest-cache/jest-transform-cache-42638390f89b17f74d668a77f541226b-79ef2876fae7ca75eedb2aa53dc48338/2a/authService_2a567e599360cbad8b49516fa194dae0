88b53cd9a75d7632e80af691b20e962d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onAuthStateChange = exports.getUserData = exports.updateUserProfile = exports.resetPassword = exports.logout = exports.loginWithGoogle = exports.registerWithEmail = exports.loginWithEmail = void 0;
const auth_1 = require("firebase/auth");
const firestore_1 = require("firebase/firestore");
const firebase_1 = require("./firebase");
const constants_1 = require("../utils/constants");
// Provider Google
const googleProvider = new auth_1.GoogleAuthProvider();
/**
 * Connexion avec email et mot de passe
 */
const loginWithEmail = async (data) => {
    try {
        const userCredential = await (0, auth_1.signInWithEmailAndPassword)(firebase_1.auth, data.email, data.password);
        const user = await (0, exports.getUserData)(userCredential.user.uid);
        return user;
    }
    catch (error) {
        throw new Error(getAuthErrorMessage(error.code));
    }
};
exports.loginWithEmail = loginWithEmail;
/**
 * Inscription avec email et mot de passe
 */
const registerWithEmail = async (data) => {
    try {
        const userCredential = await (0, auth_1.createUserWithEmailAndPassword)(firebase_1.auth, data.email, data.password);
        // Créer le profil utilisateur
        const userData = {
            email: data.email,
            displayName: data.email.split('@')[0],
            photoURL: undefined,
            isAdmin: false,
            createdAt: new Date(),
        };
        await (0, firestore_1.setDoc)((0, firestore_1.doc)(firebase_1.db, constants_1.COLLECTIONS.USERS, userCredential.user.uid), userData);
        return {
            uid: userCredential.user.uid,
            ...userData,
        };
    }
    catch (error) {
        throw new Error(getAuthErrorMessage(error.code));
    }
};
exports.registerWithEmail = registerWithEmail;
/**
 * Connexion avec Google
 */
const loginWithGoogle = async () => {
    try {
        const result = await (0, auth_1.signInWithPopup)(firebase_1.auth, googleProvider);
        const user = result.user;
        // Vérifier si l'utilisateur existe déjà
        const userDoc = await (0, firestore_1.getDoc)((0, firestore_1.doc)(firebase_1.db, constants_1.COLLECTIONS.USERS, user.uid));
        if (!userDoc.exists()) {
            // Créer un nouvel utilisateur
            const userData = {
                email: user.email,
                displayName: user.displayName || user.email.split('@')[0],
                photoURL: user.photoURL || undefined,
                isAdmin: false,
                createdAt: new Date(),
            };
            await (0, firestore_1.setDoc)((0, firestore_1.doc)(firebase_1.db, constants_1.COLLECTIONS.USERS, user.uid), userData);
            return {
                uid: user.uid,
                ...userData,
            };
        }
        else {
            // Récupérer les données existantes
            return await (0, exports.getUserData)(user.uid);
        }
    }
    catch (error) {
        throw new Error(getAuthErrorMessage(error.code));
    }
};
exports.loginWithGoogle = loginWithGoogle;
/**
 * Déconnexion
 */
const logout = async () => {
    try {
        await (0, auth_1.signOut)(firebase_1.auth);
    }
    catch (error) {
        throw new Error(getAuthErrorMessage(error.code));
    }
};
exports.logout = logout;
/**
 * Réinitialisation du mot de passe
 */
const resetPassword = async (email) => {
    try {
        await (0, auth_1.sendPasswordResetEmail)(firebase_1.auth, email);
    }
    catch (error) {
        throw new Error(getAuthErrorMessage(error.code));
    }
};
exports.resetPassword = resetPassword;
/**
 * Mise à jour du profil
 */
const updateUserProfile = async (uid, updates) => {
    try {
        // Mettre à jour Firebase Auth si nécessaire
        if (firebase_1.auth.currentUser && firebase_1.auth.currentUser.uid === uid) {
            await (0, auth_1.updateProfile)(firebase_1.auth.currentUser, {
                displayName: updates.displayName,
                photoURL: updates.photoURL,
            });
        }
        // Mettre à jour Firestore
        const userRef = (0, firestore_1.doc)(firebase_1.db, constants_1.COLLECTIONS.USERS, uid);
        await (0, firestore_1.updateDoc)(userRef, updates);
    }
    catch (error) {
        throw new Error(getAuthErrorMessage(error.code));
    }
};
exports.updateUserProfile = updateUserProfile;
/**
 * Récupérer les données utilisateur depuis Firestore
 */
const getUserData = async (uid) => {
    try {
        const userDoc = await (0, firestore_1.getDoc)((0, firestore_1.doc)(firebase_1.db, constants_1.COLLECTIONS.USERS, uid));
        if (!userDoc.exists()) {
            throw new Error('Utilisateur non trouvé');
        }
        const userData = userDoc.data();
        return {
            uid,
            ...userData,
            createdAt: userData.createdAt?.toDate() || new Date(),
        };
    }
    catch (error) {
        throw new Error('Erreur lors de la récupération des données utilisateur');
    }
};
exports.getUserData = getUserData;
/**
 * Écouter les changements d'état d'authentification
 */
const onAuthStateChange = (callback) => {
    return (0, auth_1.onAuthStateChanged)(firebase_1.auth, async (firebaseUser) => {
        if (firebaseUser) {
            try {
                const user = await (0, exports.getUserData)(firebaseUser.uid);
                callback(user);
            }
            catch (error) {
                console.error('Erreur lors de la récupération des données utilisateur:', error);
                callback(null);
            }
        }
        else {
            callback(null);
        }
    });
};
exports.onAuthStateChange = onAuthStateChange;
/**
 * Traduire les codes d'erreur Firebase
 */
const getAuthErrorMessage = (errorCode) => {
    const errorMessages = {
        'auth/user-not-found': 'Aucun utilisateur trouvé avec cet email.',
        'auth/wrong-password': 'Mot de passe incorrect.',
        'auth/email-already-in-use': 'Cet email est déjà utilisé.',
        'auth/weak-password': 'Le mot de passe doit contenir au moins 6 caractères.',
        'auth/invalid-email': 'Adresse email invalide.',
        'auth/too-many-requests': 'Trop de tentatives. Réessayez plus tard.',
        'auth/popup-closed-by-user': 'Fenêtre de connexion fermée.',
        'auth/cancelled-popup-request': 'Connexion annulée.',
        'auth/network-request-failed': 'Erreur de réseau. Vérifiez votre connexion.',
    };
    return errorMessages[errorCode] || 'Une erreur est survenue lors de l\'authentification.';
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,